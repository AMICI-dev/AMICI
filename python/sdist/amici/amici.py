# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_amici')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_amici')
    _amici = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_amici', [dirname(__file__)])
        except ImportError:
            import _amici
            return _amici
        try:
            _mod = imp.load_module('_amici', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _amici = swig_import_helper()
    del swig_import_helper
else:
    import _amici
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def stdVec2ndarray(*args):
    return _amici.stdVec2ndarray(*args)
stdVec2ndarray = _amici.stdVec2ndarray
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amici.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _amici.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _amici.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _amici.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _amici.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _amici.SwigPyIterator_equal(self, x)

    def copy(self):
        return _amici.SwigPyIterator_copy(self)

    def next(self):
        return _amici.SwigPyIterator_next(self)

    def __next__(self):
        return _amici.SwigPyIterator___next__(self)

    def previous(self):
        return _amici.SwigPyIterator_previous(self)

    def advance(self, n):
        return _amici.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _amici.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _amici.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _amici.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _amici.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _amici.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _amici.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _amici.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class SolverPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolverPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SolverPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amici.new_SolverPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _amici.SolverPtr___deref__(self)

    def release(self):
        return _amici.SolverPtr_release(self)

    def reset(self, *args):
        return _amici.SolverPtr_reset(self, *args)

    def swap(self, __u):
        return _amici.SolverPtr_swap(self, __u)

    def get(self):
        return _amici.SolverPtr_get(self)

    def __nonzero__(self):
        return _amici.SolverPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _amici.delete_SolverPtr
    __del__ = lambda self: None

    def clone(self):
        return _amici.SolverPtr_clone(self)

    def setupAMI(self, fwd, model):
        return _amici.SolverPtr_setupAMI(self, fwd, model)

    def setupAMIB(self, bwd, model):
        return _amici.SolverPtr_setupAMIB(self, bwd, model)

    def AMIGetSens(self, tret, yySout):
        return _amici.SolverPtr_AMIGetSens(self, tret, yySout)

    def getDiagnosis(self, it, rdata):
        return _amici.SolverPtr_getDiagnosis(self, it, rdata)

    def getDiagnosisB(self, it, rdata, bwd):
        return _amici.SolverPtr_getDiagnosisB(self, it, rdata, bwd)

    def AMIGetRootInfo(self, rootsfound):
        return _amici.SolverPtr_AMIGetRootInfo(self, rootsfound)

    def AMIReInit(self, t0, yy0, yp0):
        return _amici.SolverPtr_AMIReInit(self, t0, yy0, yp0)

    def AMISensReInit(self, ism, yS0, ypS0):
        return _amici.SolverPtr_AMISensReInit(self, ism, yS0, ypS0)

    def AMICalcIC(self, tout1, x, dx):
        return _amici.SolverPtr_AMICalcIC(self, tout1, x, dx)

    def AMICalcICB(self, which, tout1, xB, dxB):
        return _amici.SolverPtr_AMICalcICB(self, which, tout1, xB, dxB)

    def AMISolve(self, tout, yret, ypret, tret, itask):
        return _amici.SolverPtr_AMISolve(self, tout, yret, ypret, tret, itask)

    def AMISolveF(self, tout, yret, ypret, tret, itask, ncheckPtr):
        return _amici.SolverPtr_AMISolveF(self, tout, yret, ypret, tret, itask, ncheckPtr)

    def AMISolveB(self, tBout, itaskB):
        return _amici.SolverPtr_AMISolveB(self, tBout, itaskB)

    def AMISetStopTime(self, tstop):
        return _amici.SolverPtr_AMISetStopTime(self, tstop)

    def AMIReInitB(self, which, tB0, yyB0, ypB0):
        return _amici.SolverPtr_AMIReInitB(self, which, tB0, yyB0, ypB0)

    def AMIGetB(self, which, tret, yy, yp):
        return _amici.SolverPtr_AMIGetB(self, which, tret, yy, yp)

    def AMIGetQuadB(self, which, tret, qB):
        return _amici.SolverPtr_AMIGetQuadB(self, which, tret, qB)

    def AMIQuadReInitB(self, which, yQB0):
        return _amici.SolverPtr_AMIQuadReInitB(self, which, yQB0)

    def turnOffRootFinding(self):
        return _amici.SolverPtr_turnOffRootFinding(self)

    def getSensitivityMethod(self):
        return _amici.SolverPtr_getSensitivityMethod(self)

    def setSensitivityMethod(self, sensi_meth):
        return _amici.SolverPtr_setSensitivityMethod(self, sensi_meth)

    def getNewtonMaxSteps(self):
        return _amici.SolverPtr_getNewtonMaxSteps(self)

    def setNewtonMaxSteps(self, newton_maxsteps):
        return _amici.SolverPtr_setNewtonMaxSteps(self, newton_maxsteps)

    def getNewtonPreequilibration(self):
        return _amici.SolverPtr_getNewtonPreequilibration(self)

    def setNewtonPreequilibration(self, newton_preeq):
        return _amici.SolverPtr_setNewtonPreequilibration(self, newton_preeq)

    def getNewtonMaxLinearSteps(self):
        return _amici.SolverPtr_getNewtonMaxLinearSteps(self)

    def setNewtonMaxLinearSteps(self, newton_maxlinsteps):
        return _amici.SolverPtr_setNewtonMaxLinearSteps(self, newton_maxlinsteps)

    def getSensitivityOrder(self):
        return _amici.SolverPtr_getSensitivityOrder(self)

    def setSensitivityOrder(self, sensi):
        return _amici.SolverPtr_setSensitivityOrder(self, sensi)

    def getRelativeTolerance(self):
        return _amici.SolverPtr_getRelativeTolerance(self)

    def setRelativeTolerance(self, rtol):
        return _amici.SolverPtr_setRelativeTolerance(self, rtol)

    def getAbsoluteTolerance(self):
        return _amici.SolverPtr_getAbsoluteTolerance(self)

    def setAbsoluteTolerance(self, atol):
        return _amici.SolverPtr_setAbsoluteTolerance(self, atol)

    def getRelativeToleranceQuadratures(self):
        return _amici.SolverPtr_getRelativeToleranceQuadratures(self)

    def setRelativeToleranceQuadratures(self, rtol):
        return _amici.SolverPtr_setRelativeToleranceQuadratures(self, rtol)

    def getAbsoluteToleranceQuadratures(self):
        return _amici.SolverPtr_getAbsoluteToleranceQuadratures(self)

    def setAbsoluteToleranceQuadratures(self, atol):
        return _amici.SolverPtr_setAbsoluteToleranceQuadratures(self, atol)

    def getMaxSteps(self):
        return _amici.SolverPtr_getMaxSteps(self)

    def setMaxSteps(self, maxsteps):
        return _amici.SolverPtr_setMaxSteps(self, maxsteps)

    def getMaxStepsBackwardProblem(self):
        return _amici.SolverPtr_getMaxStepsBackwardProblem(self)

    def setMaxStepsBackwardProblem(self, maxsteps):
        return _amici.SolverPtr_setMaxStepsBackwardProblem(self, maxsteps)

    def getLinearMultistepMethod(self):
        return _amici.SolverPtr_getLinearMultistepMethod(self)

    def setLinearMultistepMethod(self, lmm):
        return _amici.SolverPtr_setLinearMultistepMethod(self, lmm)

    def getNonlinearSolverIteration(self):
        return _amici.SolverPtr_getNonlinearSolverIteration(self)

    def setNonlinearSolverIteration(self, iter):
        return _amici.SolverPtr_setNonlinearSolverIteration(self, iter)

    def getInterpolationType(self):
        return _amici.SolverPtr_getInterpolationType(self)

    def setInterpolationType(self, interpType):
        return _amici.SolverPtr_setInterpolationType(self, interpType)

    def getStateOrdering(self):
        return _amici.SolverPtr_getStateOrdering(self)

    def setStateOrdering(self, ordering):
        return _amici.SolverPtr_setStateOrdering(self, ordering)

    def getStabilityLimitFlag(self):
        return _amici.SolverPtr_getStabilityLimitFlag(self)

    def setStabilityLimitFlag(self, stldet):
        return _amici.SolverPtr_setStabilityLimitFlag(self, stldet)

    def getLinearSolver(self):
        return _amici.SolverPtr_getLinearSolver(self)

    def setLinearSolver(self, linsol):
        return _amici.SolverPtr_setLinearSolver(self, linsol)

    def getInternalSensitivityMethod(self):
        return _amici.SolverPtr_getInternalSensitivityMethod(self)

    def setInternalSensitivityMethod(self, ism):
        return _amici.SolverPtr_setInternalSensitivityMethod(self, ism)
SolverPtr_swigregister = _amici.SolverPtr_swigregister
SolverPtr_swigregister(SolverPtr)

class ReturnDataPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnDataPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnDataPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amici.new_ReturnDataPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _amici.ReturnDataPtr___deref__(self)

    def release(self):
        return _amici.ReturnDataPtr_release(self)

    def reset(self, *args):
        return _amici.ReturnDataPtr_reset(self, *args)

    def swap(self, __u):
        return _amici.ReturnDataPtr_swap(self, __u)

    def get(self):
        return _amici.ReturnDataPtr_get(self)

    def __nonzero__(self):
        return _amici.ReturnDataPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _amici.delete_ReturnDataPtr
    __del__ = lambda self: None

    def initializeObjectiveFunction(self):
        return _amici.ReturnDataPtr_initializeObjectiveFunction(self)

    def invalidate(self, t):
        return _amici.ReturnDataPtr_invalidate(self, t)

    def invalidateLLH(self):
        return _amici.ReturnDataPtr_invalidateLLH(self)

    def applyChainRuleFactorToSimulationResults(self, model):
        return _amici.ReturnDataPtr_applyChainRuleFactorToSimulationResults(self, model)
    __swig_setmethods__["ts"] = _amici.ReturnDataPtr_ts_set
    __swig_getmethods__["ts"] = _amici.ReturnDataPtr_ts_get
    if _newclass:
        ts = _swig_property(_amici.ReturnDataPtr_ts_get, _amici.ReturnDataPtr_ts_set)
    __swig_setmethods__["xdot"] = _amici.ReturnDataPtr_xdot_set
    __swig_getmethods__["xdot"] = _amici.ReturnDataPtr_xdot_get
    if _newclass:
        xdot = _swig_property(_amici.ReturnDataPtr_xdot_get, _amici.ReturnDataPtr_xdot_set)
    __swig_setmethods__["J"] = _amici.ReturnDataPtr_J_set
    __swig_getmethods__["J"] = _amici.ReturnDataPtr_J_get
    if _newclass:
        J = _swig_property(_amici.ReturnDataPtr_J_get, _amici.ReturnDataPtr_J_set)
    __swig_setmethods__["z"] = _amici.ReturnDataPtr_z_set
    __swig_getmethods__["z"] = _amici.ReturnDataPtr_z_get
    if _newclass:
        z = _swig_property(_amici.ReturnDataPtr_z_get, _amici.ReturnDataPtr_z_set)
    __swig_setmethods__["sigmaz"] = _amici.ReturnDataPtr_sigmaz_set
    __swig_getmethods__["sigmaz"] = _amici.ReturnDataPtr_sigmaz_get
    if _newclass:
        sigmaz = _swig_property(_amici.ReturnDataPtr_sigmaz_get, _amici.ReturnDataPtr_sigmaz_set)
    __swig_setmethods__["sz"] = _amici.ReturnDataPtr_sz_set
    __swig_getmethods__["sz"] = _amici.ReturnDataPtr_sz_get
    if _newclass:
        sz = _swig_property(_amici.ReturnDataPtr_sz_get, _amici.ReturnDataPtr_sz_set)
    __swig_setmethods__["ssigmaz"] = _amici.ReturnDataPtr_ssigmaz_set
    __swig_getmethods__["ssigmaz"] = _amici.ReturnDataPtr_ssigmaz_get
    if _newclass:
        ssigmaz = _swig_property(_amici.ReturnDataPtr_ssigmaz_get, _amici.ReturnDataPtr_ssigmaz_set)
    __swig_setmethods__["rz"] = _amici.ReturnDataPtr_rz_set
    __swig_getmethods__["rz"] = _amici.ReturnDataPtr_rz_get
    if _newclass:
        rz = _swig_property(_amici.ReturnDataPtr_rz_get, _amici.ReturnDataPtr_rz_set)
    __swig_setmethods__["srz"] = _amici.ReturnDataPtr_srz_set
    __swig_getmethods__["srz"] = _amici.ReturnDataPtr_srz_get
    if _newclass:
        srz = _swig_property(_amici.ReturnDataPtr_srz_get, _amici.ReturnDataPtr_srz_set)
    __swig_setmethods__["s2rz"] = _amici.ReturnDataPtr_s2rz_set
    __swig_getmethods__["s2rz"] = _amici.ReturnDataPtr_s2rz_get
    if _newclass:
        s2rz = _swig_property(_amici.ReturnDataPtr_s2rz_get, _amici.ReturnDataPtr_s2rz_set)
    __swig_setmethods__["x"] = _amici.ReturnDataPtr_x_set
    __swig_getmethods__["x"] = _amici.ReturnDataPtr_x_get
    if _newclass:
        x = _swig_property(_amici.ReturnDataPtr_x_get, _amici.ReturnDataPtr_x_set)
    __swig_setmethods__["sx"] = _amici.ReturnDataPtr_sx_set
    __swig_getmethods__["sx"] = _amici.ReturnDataPtr_sx_get
    if _newclass:
        sx = _swig_property(_amici.ReturnDataPtr_sx_get, _amici.ReturnDataPtr_sx_set)
    __swig_setmethods__["y"] = _amici.ReturnDataPtr_y_set
    __swig_getmethods__["y"] = _amici.ReturnDataPtr_y_get
    if _newclass:
        y = _swig_property(_amici.ReturnDataPtr_y_get, _amici.ReturnDataPtr_y_set)
    __swig_setmethods__["sigmay"] = _amici.ReturnDataPtr_sigmay_set
    __swig_getmethods__["sigmay"] = _amici.ReturnDataPtr_sigmay_get
    if _newclass:
        sigmay = _swig_property(_amici.ReturnDataPtr_sigmay_get, _amici.ReturnDataPtr_sigmay_set)
    __swig_setmethods__["sy"] = _amici.ReturnDataPtr_sy_set
    __swig_getmethods__["sy"] = _amici.ReturnDataPtr_sy_get
    if _newclass:
        sy = _swig_property(_amici.ReturnDataPtr_sy_get, _amici.ReturnDataPtr_sy_set)
    __swig_setmethods__["ssigmay"] = _amici.ReturnDataPtr_ssigmay_set
    __swig_getmethods__["ssigmay"] = _amici.ReturnDataPtr_ssigmay_get
    if _newclass:
        ssigmay = _swig_property(_amici.ReturnDataPtr_ssigmay_get, _amici.ReturnDataPtr_ssigmay_set)
    __swig_setmethods__["res"] = _amici.ReturnDataPtr_res_set
    __swig_getmethods__["res"] = _amici.ReturnDataPtr_res_get
    if _newclass:
        res = _swig_property(_amici.ReturnDataPtr_res_get, _amici.ReturnDataPtr_res_set)
    __swig_setmethods__["sres"] = _amici.ReturnDataPtr_sres_set
    __swig_getmethods__["sres"] = _amici.ReturnDataPtr_sres_get
    if _newclass:
        sres = _swig_property(_amici.ReturnDataPtr_sres_get, _amici.ReturnDataPtr_sres_set)
    __swig_setmethods__["FIM"] = _amici.ReturnDataPtr_FIM_set
    __swig_getmethods__["FIM"] = _amici.ReturnDataPtr_FIM_get
    if _newclass:
        FIM = _swig_property(_amici.ReturnDataPtr_FIM_get, _amici.ReturnDataPtr_FIM_set)
    __swig_setmethods__["numsteps"] = _amici.ReturnDataPtr_numsteps_set
    __swig_getmethods__["numsteps"] = _amici.ReturnDataPtr_numsteps_get
    if _newclass:
        numsteps = _swig_property(_amici.ReturnDataPtr_numsteps_get, _amici.ReturnDataPtr_numsteps_set)
    __swig_setmethods__["numstepsB"] = _amici.ReturnDataPtr_numstepsB_set
    __swig_getmethods__["numstepsB"] = _amici.ReturnDataPtr_numstepsB_get
    if _newclass:
        numstepsB = _swig_property(_amici.ReturnDataPtr_numstepsB_get, _amici.ReturnDataPtr_numstepsB_set)
    __swig_setmethods__["numrhsevals"] = _amici.ReturnDataPtr_numrhsevals_set
    __swig_getmethods__["numrhsevals"] = _amici.ReturnDataPtr_numrhsevals_get
    if _newclass:
        numrhsevals = _swig_property(_amici.ReturnDataPtr_numrhsevals_get, _amici.ReturnDataPtr_numrhsevals_set)
    __swig_setmethods__["numrhsevalsB"] = _amici.ReturnDataPtr_numrhsevalsB_set
    __swig_getmethods__["numrhsevalsB"] = _amici.ReturnDataPtr_numrhsevalsB_get
    if _newclass:
        numrhsevalsB = _swig_property(_amici.ReturnDataPtr_numrhsevalsB_get, _amici.ReturnDataPtr_numrhsevalsB_set)
    __swig_setmethods__["numerrtestfails"] = _amici.ReturnDataPtr_numerrtestfails_set
    __swig_getmethods__["numerrtestfails"] = _amici.ReturnDataPtr_numerrtestfails_get
    if _newclass:
        numerrtestfails = _swig_property(_amici.ReturnDataPtr_numerrtestfails_get, _amici.ReturnDataPtr_numerrtestfails_set)
    __swig_setmethods__["numerrtestfailsB"] = _amici.ReturnDataPtr_numerrtestfailsB_set
    __swig_getmethods__["numerrtestfailsB"] = _amici.ReturnDataPtr_numerrtestfailsB_get
    if _newclass:
        numerrtestfailsB = _swig_property(_amici.ReturnDataPtr_numerrtestfailsB_get, _amici.ReturnDataPtr_numerrtestfailsB_set)
    __swig_setmethods__["numnonlinsolvconvfails"] = _amici.ReturnDataPtr_numnonlinsolvconvfails_set
    __swig_getmethods__["numnonlinsolvconvfails"] = _amici.ReturnDataPtr_numnonlinsolvconvfails_get
    if _newclass:
        numnonlinsolvconvfails = _swig_property(_amici.ReturnDataPtr_numnonlinsolvconvfails_get, _amici.ReturnDataPtr_numnonlinsolvconvfails_set)
    __swig_setmethods__["numnonlinsolvconvfailsB"] = _amici.ReturnDataPtr_numnonlinsolvconvfailsB_set
    __swig_getmethods__["numnonlinsolvconvfailsB"] = _amici.ReturnDataPtr_numnonlinsolvconvfailsB_get
    if _newclass:
        numnonlinsolvconvfailsB = _swig_property(_amici.ReturnDataPtr_numnonlinsolvconvfailsB_get, _amici.ReturnDataPtr_numnonlinsolvconvfailsB_set)
    __swig_setmethods__["order"] = _amici.ReturnDataPtr_order_set
    __swig_getmethods__["order"] = _amici.ReturnDataPtr_order_get
    if _newclass:
        order = _swig_property(_amici.ReturnDataPtr_order_get, _amici.ReturnDataPtr_order_set)
    __swig_setmethods__["newton_status"] = _amici.ReturnDataPtr_newton_status_set
    __swig_getmethods__["newton_status"] = _amici.ReturnDataPtr_newton_status_get
    if _newclass:
        newton_status = _swig_property(_amici.ReturnDataPtr_newton_status_get, _amici.ReturnDataPtr_newton_status_set)
    __swig_setmethods__["newton_time"] = _amici.ReturnDataPtr_newton_time_set
    __swig_getmethods__["newton_time"] = _amici.ReturnDataPtr_newton_time_get
    if _newclass:
        newton_time = _swig_property(_amici.ReturnDataPtr_newton_time_get, _amici.ReturnDataPtr_newton_time_set)
    __swig_setmethods__["newton_numsteps"] = _amici.ReturnDataPtr_newton_numsteps_set
    __swig_getmethods__["newton_numsteps"] = _amici.ReturnDataPtr_newton_numsteps_get
    if _newclass:
        newton_numsteps = _swig_property(_amici.ReturnDataPtr_newton_numsteps_get, _amici.ReturnDataPtr_newton_numsteps_set)
    __swig_setmethods__["newton_numlinsteps"] = _amici.ReturnDataPtr_newton_numlinsteps_set
    __swig_getmethods__["newton_numlinsteps"] = _amici.ReturnDataPtr_newton_numlinsteps_get
    if _newclass:
        newton_numlinsteps = _swig_property(_amici.ReturnDataPtr_newton_numlinsteps_get, _amici.ReturnDataPtr_newton_numlinsteps_set)
    __swig_setmethods__["x0"] = _amici.ReturnDataPtr_x0_set
    __swig_getmethods__["x0"] = _amici.ReturnDataPtr_x0_get
    if _newclass:
        x0 = _swig_property(_amici.ReturnDataPtr_x0_get, _amici.ReturnDataPtr_x0_set)
    __swig_setmethods__["sx0"] = _amici.ReturnDataPtr_sx0_set
    __swig_getmethods__["sx0"] = _amici.ReturnDataPtr_sx0_get
    if _newclass:
        sx0 = _swig_property(_amici.ReturnDataPtr_sx0_get, _amici.ReturnDataPtr_sx0_set)
    __swig_setmethods__["llh"] = _amici.ReturnDataPtr_llh_set
    __swig_getmethods__["llh"] = _amici.ReturnDataPtr_llh_get
    if _newclass:
        llh = _swig_property(_amici.ReturnDataPtr_llh_get, _amici.ReturnDataPtr_llh_set)
    __swig_setmethods__["chi2"] = _amici.ReturnDataPtr_chi2_set
    __swig_getmethods__["chi2"] = _amici.ReturnDataPtr_chi2_get
    if _newclass:
        chi2 = _swig_property(_amici.ReturnDataPtr_chi2_get, _amici.ReturnDataPtr_chi2_set)
    __swig_setmethods__["sllh"] = _amici.ReturnDataPtr_sllh_set
    __swig_getmethods__["sllh"] = _amici.ReturnDataPtr_sllh_get
    if _newclass:
        sllh = _swig_property(_amici.ReturnDataPtr_sllh_get, _amici.ReturnDataPtr_sllh_set)
    __swig_setmethods__["s2llh"] = _amici.ReturnDataPtr_s2llh_set
    __swig_getmethods__["s2llh"] = _amici.ReturnDataPtr_s2llh_get
    if _newclass:
        s2llh = _swig_property(_amici.ReturnDataPtr_s2llh_get, _amici.ReturnDataPtr_s2llh_set)
    __swig_setmethods__["status"] = _amici.ReturnDataPtr_status_set
    __swig_getmethods__["status"] = _amici.ReturnDataPtr_status_get
    if _newclass:
        status = _swig_property(_amici.ReturnDataPtr_status_get, _amici.ReturnDataPtr_status_set)
    __swig_getmethods__["np"] = _amici.ReturnDataPtr_np_get
    if _newclass:
        np = _swig_property(_amici.ReturnDataPtr_np_get)
    __swig_getmethods__["nk"] = _amici.ReturnDataPtr_nk_get
    if _newclass:
        nk = _swig_property(_amici.ReturnDataPtr_nk_get)
    __swig_getmethods__["nx"] = _amici.ReturnDataPtr_nx_get
    if _newclass:
        nx = _swig_property(_amici.ReturnDataPtr_nx_get)
    __swig_getmethods__["nxtrue"] = _amici.ReturnDataPtr_nxtrue_get
    if _newclass:
        nxtrue = _swig_property(_amici.ReturnDataPtr_nxtrue_get)
    __swig_getmethods__["ny"] = _amici.ReturnDataPtr_ny_get
    if _newclass:
        ny = _swig_property(_amici.ReturnDataPtr_ny_get)
    __swig_getmethods__["nytrue"] = _amici.ReturnDataPtr_nytrue_get
    if _newclass:
        nytrue = _swig_property(_amici.ReturnDataPtr_nytrue_get)
    __swig_getmethods__["nz"] = _amici.ReturnDataPtr_nz_get
    if _newclass:
        nz = _swig_property(_amici.ReturnDataPtr_nz_get)
    __swig_getmethods__["nztrue"] = _amici.ReturnDataPtr_nztrue_get
    if _newclass:
        nztrue = _swig_property(_amici.ReturnDataPtr_nztrue_get)
    __swig_getmethods__["ne"] = _amici.ReturnDataPtr_ne_get
    if _newclass:
        ne = _swig_property(_amici.ReturnDataPtr_ne_get)
    __swig_getmethods__["nJ"] = _amici.ReturnDataPtr_nJ_get
    if _newclass:
        nJ = _swig_property(_amici.ReturnDataPtr_nJ_get)
    __swig_getmethods__["nplist"] = _amici.ReturnDataPtr_nplist_get
    if _newclass:
        nplist = _swig_property(_amici.ReturnDataPtr_nplist_get)
    __swig_getmethods__["nmaxevent"] = _amici.ReturnDataPtr_nmaxevent_get
    if _newclass:
        nmaxevent = _swig_property(_amici.ReturnDataPtr_nmaxevent_get)
    __swig_getmethods__["nt"] = _amici.ReturnDataPtr_nt_get
    if _newclass:
        nt = _swig_property(_amici.ReturnDataPtr_nt_get)
    __swig_getmethods__["newton_maxsteps"] = _amici.ReturnDataPtr_newton_maxsteps_get
    if _newclass:
        newton_maxsteps = _swig_property(_amici.ReturnDataPtr_newton_maxsteps_get)
    __swig_setmethods__["pscale"] = _amici.ReturnDataPtr_pscale_set
    __swig_getmethods__["pscale"] = _amici.ReturnDataPtr_pscale_get
    if _newclass:
        pscale = _swig_property(_amici.ReturnDataPtr_pscale_get, _amici.ReturnDataPtr_pscale_set)
    __swig_getmethods__["o2mode"] = _amici.ReturnDataPtr_o2mode_get
    if _newclass:
        o2mode = _swig_property(_amici.ReturnDataPtr_o2mode_get)
    __swig_getmethods__["sensi"] = _amici.ReturnDataPtr_sensi_get
    if _newclass:
        sensi = _swig_property(_amici.ReturnDataPtr_sensi_get)
    __swig_getmethods__["sensi_meth"] = _amici.ReturnDataPtr_sensi_meth_get
    if _newclass:
        sensi_meth = _swig_property(_amici.ReturnDataPtr_sensi_meth_get)
ReturnDataPtr_swigregister = _amici.ReturnDataPtr_swigregister
ReturnDataPtr_swigregister(ReturnDataPtr)

class ModelPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amici.new_ModelPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _amici.ModelPtr___deref__(self)

    def release(self):
        return _amici.ModelPtr_release(self)

    def reset(self, *args):
        return _amici.ModelPtr_reset(self, *args)

    def swap(self, __u):
        return _amici.ModelPtr_swap(self, __u)

    def get(self):
        return _amici.ModelPtr_get(self)

    def __nonzero__(self):
        return _amici.ModelPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _amici.delete_ModelPtr
    __del__ = lambda self: None

    def clone(self):
        return _amici.ModelPtr_clone(self)

    def getSolver(self):
        return _amici.ModelPtr_getSolver(self)

    def froot(self, t, x, dx, root):
        return _amici.ModelPtr_froot(self, t, x, dx, root)

    def fxdot(self, t, x, dx, xdot):
        return _amici.ModelPtr_fxdot(self, t, x, dx, xdot)

    def fJ(self, t, cj, x, dx, xdot, J):
        return _amici.ModelPtr_fJ(self, t, cj, x, dx, xdot, J)

    def fJSparse(self, t, cj, x, dx, xdot, J):
        return _amici.ModelPtr_fJSparse(self, t, cj, x, dx, xdot, J)

    def fJDiag(self, t, Jdiag, cj, x, dx):
        return _amici.ModelPtr_fJDiag(self, t, Jdiag, cj, x, dx)

    def fdxdotdp(self, t, x, dx):
        return _amici.ModelPtr_fdxdotdp(self, t, x, dx)

    def fJv(self, t, x, dx, xdot, v, nJv, cj):
        return _amici.ModelPtr_fJv(self, t, x, dx, xdot, v, nJv, cj)

    def fx0(self, x):
        return _amici.ModelPtr_fx0(self, x)

    def fdx0(self, x0, dx0):
        return _amici.ModelPtr_fdx0(self, x0, dx0)

    def fsx0(self, sx, x):
        return _amici.ModelPtr_fsx0(self, sx, x)

    def fsdx0(self):
        return _amici.ModelPtr_fsdx0(self)

    def fstau(self, t, ie, x, sx):
        return _amici.ModelPtr_fstau(self, t, ie, x, sx)

    def fy(self, it, rdata):
        return _amici.ModelPtr_fy(self, it, rdata)

    def fdydp(self, it, rdata):
        return _amici.ModelPtr_fdydp(self, it, rdata)

    def fdydx(self, it, rdata):
        return _amici.ModelPtr_fdydx(self, it, rdata)

    def fz(self, nroots, ie, t, x, rdata):
        return _amici.ModelPtr_fz(self, nroots, ie, t, x, rdata)

    def fsz(self, nroots, ie, t, x, sx, rdata):
        return _amici.ModelPtr_fsz(self, nroots, ie, t, x, sx, rdata)

    def frz(self, nroots, ie, t, x, rdata):
        return _amici.ModelPtr_frz(self, nroots, ie, t, x, rdata)

    def fsrz(self, nroots, ie, t, x, sx, rdata):
        return _amici.ModelPtr_fsrz(self, nroots, ie, t, x, sx, rdata)

    def fdzdp(self, t, ie, x):
        return _amici.ModelPtr_fdzdp(self, t, ie, x)

    def fdzdx(self, t, ie, x):
        return _amici.ModelPtr_fdzdx(self, t, ie, x)

    def fdrzdp(self, t, ie, x):
        return _amici.ModelPtr_fdrzdp(self, t, ie, x)

    def fdrzdx(self, t, ie, x):
        return _amici.ModelPtr_fdrzdx(self, t, ie, x)

    def fdeltax(self, ie, t, x, xdot, xdot_old):
        return _amici.ModelPtr_fdeltax(self, ie, t, x, xdot, xdot_old)

    def fdeltasx(self, ie, t, x, sx, xdot, xdot_old):
        return _amici.ModelPtr_fdeltasx(self, ie, t, x, sx, xdot, xdot_old)

    def fdeltaxB(self, ie, t, x, xB, xdot, xdot_old):
        return _amici.ModelPtr_fdeltaxB(self, ie, t, x, xB, xdot, xdot_old)

    def fdeltaqB(self, ie, t, x, xB, xdot, xdot_old):
        return _amici.ModelPtr_fdeltaqB(self, ie, t, x, xB, xdot, xdot_old)

    def fsigmay(self, it, edata, rdata):
        return _amici.ModelPtr_fsigmay(self, it, edata, rdata)

    def fdsigmaydp(self, it, rdata, edata):
        return _amici.ModelPtr_fdsigmaydp(self, it, rdata, edata)

    def fsigmaz(self, t, ie, nroots, edata, rdata):
        return _amici.ModelPtr_fsigmaz(self, t, ie, nroots, edata, rdata)

    def fdsigmazdp(self, t):
        return _amici.ModelPtr_fdsigmazdp(self, t)

    def fJy(self, it, rdata, edata):
        return _amici.ModelPtr_fJy(self, it, rdata, edata)

    def fJz(self, nroots, rdata, edata):
        return _amici.ModelPtr_fJz(self, nroots, rdata, edata)

    def fJrz(self, nroots, rdata, edata):
        return _amici.ModelPtr_fJrz(self, nroots, rdata, edata)

    def fdJydy(self, it, rdata, edata):
        return _amici.ModelPtr_fdJydy(self, it, rdata, edata)

    def fdJydsigma(self, it, rdata, edata):
        return _amici.ModelPtr_fdJydsigma(self, it, rdata, edata)

    def fdJzdz(self, nroots, rdata, edata):
        return _amici.ModelPtr_fdJzdz(self, nroots, rdata, edata)

    def fdJzdsigma(self, nroots, rdata, edata):
        return _amici.ModelPtr_fdJzdsigma(self, nroots, rdata, edata)

    def fdJrzdz(self, nroots, rdata, edata):
        return _amici.ModelPtr_fdJrzdz(self, nroots, rdata, edata)

    def fdJrzdsigma(self, nroots, rdata, edata):
        return _amici.ModelPtr_fdJrzdsigma(self, nroots, rdata, edata)

    def fsy(self, it, rdata):
        return _amici.ModelPtr_fsy(self, it, rdata)

    def fsz_tf(self, nroots, ie, rdata):
        return _amici.ModelPtr_fsz_tf(self, nroots, ie, rdata)

    def fsJy(self, it, dJydx, rdata):
        return _amici.ModelPtr_fsJy(self, it, dJydx, rdata)

    def fdJydp(self, it, edata, rdata):
        return _amici.ModelPtr_fdJydp(self, it, edata, rdata)

    def fdJydx(self, dJydx, it, edata, rdata):
        return _amici.ModelPtr_fdJydx(self, dJydx, it, edata, rdata)

    def fsJz(self, nroots, dJzdx, sx, rdata):
        return _amici.ModelPtr_fsJz(self, nroots, dJzdx, sx, rdata)

    def fdJzdp(self, nroots, t, edata, rdata):
        return _amici.ModelPtr_fdJzdp(self, nroots, t, edata, rdata)

    def fdJzdx(self, dJzdx, nroots, t, edata, rdata):
        return _amici.ModelPtr_fdJzdx(self, dJzdx, nroots, t, edata, rdata)

    def initialize(self, x, dx):
        return _amici.ModelPtr_initialize(self, x, dx)

    def initializeStates(self, x):
        return _amici.ModelPtr_initializeStates(self, x)

    def initHeaviside(self, x, dx):
        return _amici.ModelPtr_initHeaviside(self, x, dx)

    def nplist(self):
        return _amici.ModelPtr_nplist(self)

    def np(self):
        return _amici.ModelPtr_np(self)

    def nk(self):
        return _amici.ModelPtr_nk(self)

    def k(self):
        return _amici.ModelPtr_k(self)

    def nMaxEvent(self):
        return _amici.ModelPtr_nMaxEvent(self)

    def setNMaxEvent(self, nmaxevent):
        return _amici.ModelPtr_setNMaxEvent(self, nmaxevent)

    def nt(self):
        return _amici.ModelPtr_nt(self)

    def getParameterScale(self):
        return _amici.ModelPtr_getParameterScale(self)

    def setParameterScale(self, *args):
        return _amici.ModelPtr_setParameterScale(self, *args)

    def getParameters(self):
        return _amici.ModelPtr_getParameters(self)

    def setParameters(self, p):
        return _amici.ModelPtr_setParameters(self, p)

    def getUnscaledParameters(self):
        return _amici.ModelPtr_getUnscaledParameters(self)

    def getFixedParameters(self):
        return _amici.ModelPtr_getFixedParameters(self)

    def setFixedParameters(self, k):
        return _amici.ModelPtr_setFixedParameters(self, k)

    def getTimepoints(self):
        return _amici.ModelPtr_getTimepoints(self)

    def setTimepoints(self, ts):
        return _amici.ModelPtr_setTimepoints(self, ts)

    def t(self, idx):
        return _amici.ModelPtr_t(self, idx)

    def getParameterList(self):
        return _amici.ModelPtr_getParameterList(self)

    def setParameterList(self, plist):
        return _amici.ModelPtr_setParameterList(self, plist)

    def getInitialStates(self):
        return _amici.ModelPtr_getInitialStates(self)

    def setInitialStates(self, x0):
        return _amici.ModelPtr_setInitialStates(self, x0)

    def getInitialStateSensitivities(self):
        return _amici.ModelPtr_getInitialStateSensitivities(self)

    def setInitialStateSensitivities(self, sx0):
        return _amici.ModelPtr_setInitialStateSensitivities(self, sx0)

    def t0(self):
        return _amici.ModelPtr_t0(self)

    def setT0(self, t0):
        return _amici.ModelPtr_setT0(self, t0)

    def plist(self, pos):
        return _amici.ModelPtr_plist(self, pos)

    def unscaleParameters(self, bufferUnscaled):
        return _amici.ModelPtr_unscaleParameters(self, bufferUnscaled)

    def requireSensitivitiesForAllParameters(self):
        return _amici.ModelPtr_requireSensitivitiesForAllParameters(self)

    def fw(self, t, x):
        return _amici.ModelPtr_fw(self, t, x)

    def fdwdp(self, t, x):
        return _amici.ModelPtr_fdwdp(self, t, x)

    def fdwdx(self, t, x):
        return _amici.ModelPtr_fdwdx(self, t, x)

    def fres(self, it, rdata, edata):
        return _amici.ModelPtr_fres(self, it, rdata, edata)

    def fchi2(self, it, rdata):
        return _amici.ModelPtr_fchi2(self, it, rdata)

    def fsres(self, it, rdata, edata):
        return _amici.ModelPtr_fsres(self, it, rdata, edata)

    def fFIM(self, it, rdata):
        return _amici.ModelPtr_fFIM(self, it, rdata)

    def updateHeaviside(self, rootsfound):
        return _amici.ModelPtr_updateHeaviside(self, rootsfound)

    def updateHeavisideB(self, rootsfound):
        return _amici.ModelPtr_updateHeavisideB(self, rootsfound)

    def gett(self, it, rdata):
        return _amici.ModelPtr_gett(self, it, rdata)

    def checkFinite(self, N, array, fun):
        return _amici.ModelPtr_checkFinite(self, N, array, fun)

    def hasParameterNames(self):
        return _amici.ModelPtr_hasParameterNames(self)

    def getParameterNames(self):
        return _amici.ModelPtr_getParameterNames(self)

    def hasStateNames(self):
        return _amici.ModelPtr_hasStateNames(self)

    def getStateNames(self):
        return _amici.ModelPtr_getStateNames(self)

    def hasFixedParameterNames(self):
        return _amici.ModelPtr_hasFixedParameterNames(self)

    def getFixedParameterNames(self):
        return _amici.ModelPtr_getFixedParameterNames(self)

    def hasObservableNames(self):
        return _amici.ModelPtr_hasObservableNames(self)

    def getObservableNames(self):
        return _amici.ModelPtr_getObservableNames(self)

    def hasParameterIds(self):
        return _amici.ModelPtr_hasParameterIds(self)

    def getParameterIds(self):
        return _amici.ModelPtr_getParameterIds(self)

    def hasStateIds(self):
        return _amici.ModelPtr_hasStateIds(self)

    def getStateIds(self):
        return _amici.ModelPtr_getStateIds(self)

    def hasFixedParameterIds(self):
        return _amici.ModelPtr_hasFixedParameterIds(self)

    def getFixedParameterIds(self):
        return _amici.ModelPtr_getFixedParameterIds(self)

    def hasObservableIds(self):
        return _amici.ModelPtr_hasObservableIds(self)

    def getObservableIds(self):
        return _amici.ModelPtr_getObservableIds(self)
    __swig_getmethods__["nx"] = _amici.ModelPtr_nx_get
    if _newclass:
        nx = _swig_property(_amici.ModelPtr_nx_get)
    __swig_getmethods__["nxtrue"] = _amici.ModelPtr_nxtrue_get
    if _newclass:
        nxtrue = _swig_property(_amici.ModelPtr_nxtrue_get)
    __swig_getmethods__["ny"] = _amici.ModelPtr_ny_get
    if _newclass:
        ny = _swig_property(_amici.ModelPtr_ny_get)
    __swig_getmethods__["nytrue"] = _amici.ModelPtr_nytrue_get
    if _newclass:
        nytrue = _swig_property(_amici.ModelPtr_nytrue_get)
    __swig_getmethods__["nz"] = _amici.ModelPtr_nz_get
    if _newclass:
        nz = _swig_property(_amici.ModelPtr_nz_get)
    __swig_getmethods__["nztrue"] = _amici.ModelPtr_nztrue_get
    if _newclass:
        nztrue = _swig_property(_amici.ModelPtr_nztrue_get)
    __swig_getmethods__["ne"] = _amici.ModelPtr_ne_get
    if _newclass:
        ne = _swig_property(_amici.ModelPtr_ne_get)
    __swig_getmethods__["nw"] = _amici.ModelPtr_nw_get
    if _newclass:
        nw = _swig_property(_amici.ModelPtr_nw_get)
    __swig_getmethods__["ndwdx"] = _amici.ModelPtr_ndwdx_get
    if _newclass:
        ndwdx = _swig_property(_amici.ModelPtr_ndwdx_get)
    __swig_getmethods__["ndwdp"] = _amici.ModelPtr_ndwdp_get
    if _newclass:
        ndwdp = _swig_property(_amici.ModelPtr_ndwdp_get)
    __swig_getmethods__["nnz"] = _amici.ModelPtr_nnz_get
    if _newclass:
        nnz = _swig_property(_amici.ModelPtr_nnz_get)
    __swig_getmethods__["nJ"] = _amici.ModelPtr_nJ_get
    if _newclass:
        nJ = _swig_property(_amici.ModelPtr_nJ_get)
    __swig_getmethods__["ubw"] = _amici.ModelPtr_ubw_get
    if _newclass:
        ubw = _swig_property(_amici.ModelPtr_ubw_get)
    __swig_getmethods__["lbw"] = _amici.ModelPtr_lbw_get
    if _newclass:
        lbw = _swig_property(_amici.ModelPtr_lbw_get)
    __swig_getmethods__["o2mode"] = _amici.ModelPtr_o2mode_get
    if _newclass:
        o2mode = _swig_property(_amici.ModelPtr_o2mode_get)
    __swig_getmethods__["z2event"] = _amici.ModelPtr_z2event_get
    if _newclass:
        z2event = _swig_property(_amici.ModelPtr_z2event_get)
    __swig_getmethods__["idlist"] = _amici.ModelPtr_idlist_get
    if _newclass:
        idlist = _swig_property(_amici.ModelPtr_idlist_get)
    __swig_setmethods__["sigmay"] = _amici.ModelPtr_sigmay_set
    __swig_getmethods__["sigmay"] = _amici.ModelPtr_sigmay_get
    if _newclass:
        sigmay = _swig_property(_amici.ModelPtr_sigmay_get, _amici.ModelPtr_sigmay_set)
    __swig_setmethods__["dsigmaydp"] = _amici.ModelPtr_dsigmaydp_set
    __swig_getmethods__["dsigmaydp"] = _amici.ModelPtr_dsigmaydp_get
    if _newclass:
        dsigmaydp = _swig_property(_amici.ModelPtr_dsigmaydp_get, _amici.ModelPtr_dsigmaydp_set)
    __swig_setmethods__["sigmaz"] = _amici.ModelPtr_sigmaz_set
    __swig_getmethods__["sigmaz"] = _amici.ModelPtr_sigmaz_get
    if _newclass:
        sigmaz = _swig_property(_amici.ModelPtr_sigmaz_get, _amici.ModelPtr_sigmaz_set)
    __swig_setmethods__["dsigmazdp"] = _amici.ModelPtr_dsigmazdp_set
    __swig_getmethods__["dsigmazdp"] = _amici.ModelPtr_dsigmazdp_get
    if _newclass:
        dsigmazdp = _swig_property(_amici.ModelPtr_dsigmazdp_get, _amici.ModelPtr_dsigmazdp_set)
    __swig_setmethods__["dJydp"] = _amici.ModelPtr_dJydp_set
    __swig_getmethods__["dJydp"] = _amici.ModelPtr_dJydp_get
    if _newclass:
        dJydp = _swig_property(_amici.ModelPtr_dJydp_get, _amici.ModelPtr_dJydp_set)
    __swig_setmethods__["dJzdp"] = _amici.ModelPtr_dJzdp_set
    __swig_getmethods__["dJzdp"] = _amici.ModelPtr_dJzdp_get
    if _newclass:
        dJzdp = _swig_property(_amici.ModelPtr_dJzdp_get, _amici.ModelPtr_dJzdp_set)
    __swig_setmethods__["deltax"] = _amici.ModelPtr_deltax_set
    __swig_getmethods__["deltax"] = _amici.ModelPtr_deltax_get
    if _newclass:
        deltax = _swig_property(_amici.ModelPtr_deltax_get, _amici.ModelPtr_deltax_set)
    __swig_setmethods__["deltasx"] = _amici.ModelPtr_deltasx_set
    __swig_getmethods__["deltasx"] = _amici.ModelPtr_deltasx_get
    if _newclass:
        deltasx = _swig_property(_amici.ModelPtr_deltasx_get, _amici.ModelPtr_deltasx_set)
    __swig_setmethods__["deltaxB"] = _amici.ModelPtr_deltaxB_set
    __swig_getmethods__["deltaxB"] = _amici.ModelPtr_deltaxB_get
    if _newclass:
        deltaxB = _swig_property(_amici.ModelPtr_deltaxB_get, _amici.ModelPtr_deltaxB_set)
    __swig_setmethods__["deltaqB"] = _amici.ModelPtr_deltaqB_set
    __swig_getmethods__["deltaqB"] = _amici.ModelPtr_deltaqB_get
    if _newclass:
        deltaqB = _swig_property(_amici.ModelPtr_deltaqB_get, _amici.ModelPtr_deltaqB_set)
    __swig_setmethods__["dxdotdp"] = _amici.ModelPtr_dxdotdp_set
    __swig_getmethods__["dxdotdp"] = _amici.ModelPtr_dxdotdp_get
    if _newclass:
        dxdotdp = _swig_property(_amici.ModelPtr_dxdotdp_get, _amici.ModelPtr_dxdotdp_set)
ModelPtr_swigregister = _amici.ModelPtr_swigregister
ModelPtr_swigregister(ModelPtr)

class ExpDataPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpDataPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExpDataPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amici.new_ExpDataPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _amici.ExpDataPtr___deref__(self)

    def release(self):
        return _amici.ExpDataPtr_release(self)

    def reset(self, *args):
        return _amici.ExpDataPtr_reset(self, *args)

    def swap(self, __u):
        return _amici.ExpDataPtr_swap(self, __u)

    def get(self):
        return _amici.ExpDataPtr_get(self)

    def __nonzero__(self):
        return _amici.ExpDataPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _amici.delete_ExpDataPtr
    __del__ = lambda self: None

    def setTimepoints(self, timepoints):
        return _amici.ExpDataPtr_setTimepoints(self, timepoints)

    def setObservedData(self, observedData):
        return _amici.ExpDataPtr_setObservedData(self, observedData)

    def setObservedDataStdDev(self, observedDataStdDev):
        return _amici.ExpDataPtr_setObservedDataStdDev(self, observedDataStdDev)

    def setObservedEvents(self, observedEvents):
        return _amici.ExpDataPtr_setObservedEvents(self, observedEvents)

    def setObservedEventsStdDev(self, observedEventsStdDev):
        return _amici.ExpDataPtr_setObservedEventsStdDev(self, observedEventsStdDev)
    __swig_setmethods__["ts"] = _amici.ExpDataPtr_ts_set
    __swig_getmethods__["ts"] = _amici.ExpDataPtr_ts_get
    if _newclass:
        ts = _swig_property(_amici.ExpDataPtr_ts_get, _amici.ExpDataPtr_ts_set)
    __swig_setmethods__["my"] = _amici.ExpDataPtr_my_set
    __swig_getmethods__["my"] = _amici.ExpDataPtr_my_get
    if _newclass:
        my = _swig_property(_amici.ExpDataPtr_my_get, _amici.ExpDataPtr_my_set)
    __swig_setmethods__["sigmay"] = _amici.ExpDataPtr_sigmay_set
    __swig_getmethods__["sigmay"] = _amici.ExpDataPtr_sigmay_get
    if _newclass:
        sigmay = _swig_property(_amici.ExpDataPtr_sigmay_get, _amici.ExpDataPtr_sigmay_set)
    __swig_setmethods__["mz"] = _amici.ExpDataPtr_mz_set
    __swig_getmethods__["mz"] = _amici.ExpDataPtr_mz_get
    if _newclass:
        mz = _swig_property(_amici.ExpDataPtr_mz_get, _amici.ExpDataPtr_mz_set)
    __swig_setmethods__["sigmaz"] = _amici.ExpDataPtr_sigmaz_set
    __swig_getmethods__["sigmaz"] = _amici.ExpDataPtr_sigmaz_get
    if _newclass:
        sigmaz = _swig_property(_amici.ExpDataPtr_sigmaz_get, _amici.ExpDataPtr_sigmaz_set)
    __swig_getmethods__["nytrue"] = _amici.ExpDataPtr_nytrue_get
    if _newclass:
        nytrue = _swig_property(_amici.ExpDataPtr_nytrue_get)
    __swig_getmethods__["nztrue"] = _amici.ExpDataPtr_nztrue_get
    if _newclass:
        nztrue = _swig_property(_amici.ExpDataPtr_nztrue_get)
    __swig_getmethods__["nt"] = _amici.ExpDataPtr_nt_get
    if _newclass:
        nt = _swig_property(_amici.ExpDataPtr_nt_get)
    __swig_getmethods__["nmaxevent"] = _amici.ExpDataPtr_nmaxevent_get
    if _newclass:
        nmaxevent = _swig_property(_amici.ExpDataPtr_nmaxevent_get)
    __swig_setmethods__["fixedParameters"] = _amici.ExpDataPtr_fixedParameters_set
    __swig_getmethods__["fixedParameters"] = _amici.ExpDataPtr_fixedParameters_get
    if _newclass:
        fixedParameters = _swig_property(_amici.ExpDataPtr_fixedParameters_get, _amici.ExpDataPtr_fixedParameters_set)
    __swig_setmethods__["fixedParametersPreequilibration"] = _amici.ExpDataPtr_fixedParametersPreequilibration_set
    __swig_getmethods__["fixedParametersPreequilibration"] = _amici.ExpDataPtr_fixedParametersPreequilibration_get
    if _newclass:
        fixedParametersPreequilibration = _swig_property(_amici.ExpDataPtr_fixedParametersPreequilibration_get, _amici.ExpDataPtr_fixedParametersPreequilibration_set)
ExpDataPtr_swigregister = _amici.ExpDataPtr_swigregister
ExpDataPtr_swigregister(ExpDataPtr)

AMICI_ONEOUTPUT = _amici.AMICI_ONEOUTPUT
AMICI_RECOVERABLE_ERROR = _amici.AMICI_RECOVERABLE_ERROR
AMICI_TOO_MUCH_WORK = _amici.AMICI_TOO_MUCH_WORK
AMICI_TOO_MUCH_ACC = _amici.AMICI_TOO_MUCH_ACC
AMICI_ERR_FAILURE = _amici.AMICI_ERR_FAILURE
AMICI_CONV_FAILURE = _amici.AMICI_CONV_FAILURE
AMICI_ILL_INPUT = _amici.AMICI_ILL_INPUT
AMICI_ERROR = _amici.AMICI_ERROR
AMICI_SUCCESS = _amici.AMICI_SUCCESS
AMICI_DATA_RETURN = _amici.AMICI_DATA_RETURN
AMICI_ROOT_RETURN = _amici.AMICI_ROOT_RETURN
AMICI_NORMAL = _amici.AMICI_NORMAL
AMICI_ONE_STEP = _amici.AMICI_ONE_STEP
AMICI_PREEQUILIBRATE = _amici.AMICI_PREEQUILIBRATE
FALSE = _amici.FALSE
TRUE = _amici.TRUE
AMICI_BLAS_RowMajor = _amici.AMICI_BLAS_RowMajor
AMICI_BLAS_ColMajor = _amici.AMICI_BLAS_ColMajor
AMICI_BLAS_NoTrans = _amici.AMICI_BLAS_NoTrans
AMICI_BLAS_Trans = _amici.AMICI_BLAS_Trans
AMICI_BLAS_ConjTrans = _amici.AMICI_BLAS_ConjTrans
AMICI_SCALING_NONE = _amici.AMICI_SCALING_NONE
AMICI_SCALING_LN = _amici.AMICI_SCALING_LN
AMICI_SCALING_LOG10 = _amici.AMICI_SCALING_LOG10
AMICI_O2MODE_NONE = _amici.AMICI_O2MODE_NONE
AMICI_O2MODE_FULL = _amici.AMICI_O2MODE_FULL
AMICI_O2MODE_DIR = _amici.AMICI_O2MODE_DIR
AMICI_SENSI_ORDER_NONE = _amici.AMICI_SENSI_ORDER_NONE
AMICI_SENSI_ORDER_FIRST = _amici.AMICI_SENSI_ORDER_FIRST
AMICI_SENSI_ORDER_SECOND = _amici.AMICI_SENSI_ORDER_SECOND
AMICI_SENSI_NONE = _amici.AMICI_SENSI_NONE
AMICI_SENSI_FSA = _amici.AMICI_SENSI_FSA
AMICI_SENSI_ASA = _amici.AMICI_SENSI_ASA
AMICI_DENSE = _amici.AMICI_DENSE
AMICI_BAND = _amici.AMICI_BAND
AMICI_LAPACKDENSE = _amici.AMICI_LAPACKDENSE
AMICI_LAPACKBAND = _amici.AMICI_LAPACKBAND
AMICI_DIAG = _amici.AMICI_DIAG
AMICI_SPGMR = _amici.AMICI_SPGMR
AMICI_SPBCG = _amici.AMICI_SPBCG
AMICI_SPTFQMR = _amici.AMICI_SPTFQMR
AMICI_KLU = _amici.AMICI_KLU
SIMULTANEOUS = _amici.SIMULTANEOUS
STAGGERED = _amici.STAGGERED
STAGGERED1 = _amici.STAGGERED1
HERMITE = _amici.HERMITE
POLYNOMIAL = _amici.POLYNOMIAL
ADAMS = _amici.ADAMS
BDF = _amici.BDF
FUNCTIONAL = _amici.FUNCTIONAL
NEWTON = _amici.NEWTON
AMD = _amici.AMD
COLAMD = _amici.COLAMD
natural = _amici.natural
class ExpData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExpData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amici.new_ExpData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setTimepoints(self, timepoints):
        return _amici.ExpData_setTimepoints(self, timepoints)

    def setObservedData(self, observedData):
        return _amici.ExpData_setObservedData(self, observedData)

    def setObservedDataStdDev(self, observedDataStdDev):
        return _amici.ExpData_setObservedDataStdDev(self, observedDataStdDev)

    def setObservedEvents(self, observedEvents):
        return _amici.ExpData_setObservedEvents(self, observedEvents)

    def setObservedEventsStdDev(self, observedEventsStdDev):
        return _amici.ExpData_setObservedEventsStdDev(self, observedEventsStdDev)
    __swig_destroy__ = _amici.delete_ExpData
    __del__ = lambda self: None
    __swig_setmethods__["ts"] = _amici.ExpData_ts_set
    __swig_getmethods__["ts"] = _amici.ExpData_ts_get
    if _newclass:
        ts = _swig_property(_amici.ExpData_ts_get, _amici.ExpData_ts_set)
    __swig_setmethods__["my"] = _amici.ExpData_my_set
    __swig_getmethods__["my"] = _amici.ExpData_my_get
    if _newclass:
        my = _swig_property(_amici.ExpData_my_get, _amici.ExpData_my_set)
    __swig_setmethods__["sigmay"] = _amici.ExpData_sigmay_set
    __swig_getmethods__["sigmay"] = _amici.ExpData_sigmay_get
    if _newclass:
        sigmay = _swig_property(_amici.ExpData_sigmay_get, _amici.ExpData_sigmay_set)
    __swig_setmethods__["mz"] = _amici.ExpData_mz_set
    __swig_getmethods__["mz"] = _amici.ExpData_mz_get
    if _newclass:
        mz = _swig_property(_amici.ExpData_mz_get, _amici.ExpData_mz_set)
    __swig_setmethods__["sigmaz"] = _amici.ExpData_sigmaz_set
    __swig_getmethods__["sigmaz"] = _amici.ExpData_sigmaz_get
    if _newclass:
        sigmaz = _swig_property(_amici.ExpData_sigmaz_get, _amici.ExpData_sigmaz_set)
    __swig_getmethods__["nytrue"] = _amici.ExpData_nytrue_get
    if _newclass:
        nytrue = _swig_property(_amici.ExpData_nytrue_get)
    __swig_getmethods__["nztrue"] = _amici.ExpData_nztrue_get
    if _newclass:
        nztrue = _swig_property(_amici.ExpData_nztrue_get)
    __swig_getmethods__["nt"] = _amici.ExpData_nt_get
    if _newclass:
        nt = _swig_property(_amici.ExpData_nt_get)
    __swig_getmethods__["nmaxevent"] = _amici.ExpData_nmaxevent_get
    if _newclass:
        nmaxevent = _swig_property(_amici.ExpData_nmaxevent_get)
    __swig_setmethods__["fixedParameters"] = _amici.ExpData_fixedParameters_set
    __swig_getmethods__["fixedParameters"] = _amici.ExpData_fixedParameters_get
    if _newclass:
        fixedParameters = _swig_property(_amici.ExpData_fixedParameters_get, _amici.ExpData_fixedParameters_set)
    __swig_setmethods__["fixedParametersPreequilibration"] = _amici.ExpData_fixedParametersPreequilibration_set
    __swig_getmethods__["fixedParametersPreequilibration"] = _amici.ExpData_fixedParametersPreequilibration_get
    if _newclass:
        fixedParametersPreequilibration = _swig_property(_amici.ExpData_fixedParametersPreequilibration_get, _amici.ExpData_fixedParametersPreequilibration_set)
ExpData_swigregister = _amici.ExpData_swigregister
ExpData_swigregister(ExpData)
cvar = _amici.cvar
pi = cvar.pi

class ReturnData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amici.new_ReturnData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _amici.delete_ReturnData
    __del__ = lambda self: None

    def initializeObjectiveFunction(self):
        return _amici.ReturnData_initializeObjectiveFunction(self)

    def invalidate(self, t):
        return _amici.ReturnData_invalidate(self, t)

    def invalidateLLH(self):
        return _amici.ReturnData_invalidateLLH(self)

    def applyChainRuleFactorToSimulationResults(self, model):
        return _amici.ReturnData_applyChainRuleFactorToSimulationResults(self, model)
    __swig_setmethods__["ts"] = _amici.ReturnData_ts_set
    __swig_getmethods__["ts"] = _amici.ReturnData_ts_get
    if _newclass:
        ts = _swig_property(_amici.ReturnData_ts_get, _amici.ReturnData_ts_set)
    __swig_setmethods__["xdot"] = _amici.ReturnData_xdot_set
    __swig_getmethods__["xdot"] = _amici.ReturnData_xdot_get
    if _newclass:
        xdot = _swig_property(_amici.ReturnData_xdot_get, _amici.ReturnData_xdot_set)
    __swig_setmethods__["J"] = _amici.ReturnData_J_set
    __swig_getmethods__["J"] = _amici.ReturnData_J_get
    if _newclass:
        J = _swig_property(_amici.ReturnData_J_get, _amici.ReturnData_J_set)
    __swig_setmethods__["z"] = _amici.ReturnData_z_set
    __swig_getmethods__["z"] = _amici.ReturnData_z_get
    if _newclass:
        z = _swig_property(_amici.ReturnData_z_get, _amici.ReturnData_z_set)
    __swig_setmethods__["sigmaz"] = _amici.ReturnData_sigmaz_set
    __swig_getmethods__["sigmaz"] = _amici.ReturnData_sigmaz_get
    if _newclass:
        sigmaz = _swig_property(_amici.ReturnData_sigmaz_get, _amici.ReturnData_sigmaz_set)
    __swig_setmethods__["sz"] = _amici.ReturnData_sz_set
    __swig_getmethods__["sz"] = _amici.ReturnData_sz_get
    if _newclass:
        sz = _swig_property(_amici.ReturnData_sz_get, _amici.ReturnData_sz_set)
    __swig_setmethods__["ssigmaz"] = _amici.ReturnData_ssigmaz_set
    __swig_getmethods__["ssigmaz"] = _amici.ReturnData_ssigmaz_get
    if _newclass:
        ssigmaz = _swig_property(_amici.ReturnData_ssigmaz_get, _amici.ReturnData_ssigmaz_set)
    __swig_setmethods__["rz"] = _amici.ReturnData_rz_set
    __swig_getmethods__["rz"] = _amici.ReturnData_rz_get
    if _newclass:
        rz = _swig_property(_amici.ReturnData_rz_get, _amici.ReturnData_rz_set)
    __swig_setmethods__["srz"] = _amici.ReturnData_srz_set
    __swig_getmethods__["srz"] = _amici.ReturnData_srz_get
    if _newclass:
        srz = _swig_property(_amici.ReturnData_srz_get, _amici.ReturnData_srz_set)
    __swig_setmethods__["s2rz"] = _amici.ReturnData_s2rz_set
    __swig_getmethods__["s2rz"] = _amici.ReturnData_s2rz_get
    if _newclass:
        s2rz = _swig_property(_amici.ReturnData_s2rz_get, _amici.ReturnData_s2rz_set)
    __swig_setmethods__["x"] = _amici.ReturnData_x_set
    __swig_getmethods__["x"] = _amici.ReturnData_x_get
    if _newclass:
        x = _swig_property(_amici.ReturnData_x_get, _amici.ReturnData_x_set)
    __swig_setmethods__["sx"] = _amici.ReturnData_sx_set
    __swig_getmethods__["sx"] = _amici.ReturnData_sx_get
    if _newclass:
        sx = _swig_property(_amici.ReturnData_sx_get, _amici.ReturnData_sx_set)
    __swig_setmethods__["y"] = _amici.ReturnData_y_set
    __swig_getmethods__["y"] = _amici.ReturnData_y_get
    if _newclass:
        y = _swig_property(_amici.ReturnData_y_get, _amici.ReturnData_y_set)
    __swig_setmethods__["sigmay"] = _amici.ReturnData_sigmay_set
    __swig_getmethods__["sigmay"] = _amici.ReturnData_sigmay_get
    if _newclass:
        sigmay = _swig_property(_amici.ReturnData_sigmay_get, _amici.ReturnData_sigmay_set)
    __swig_setmethods__["sy"] = _amici.ReturnData_sy_set
    __swig_getmethods__["sy"] = _amici.ReturnData_sy_get
    if _newclass:
        sy = _swig_property(_amici.ReturnData_sy_get, _amici.ReturnData_sy_set)
    __swig_setmethods__["ssigmay"] = _amici.ReturnData_ssigmay_set
    __swig_getmethods__["ssigmay"] = _amici.ReturnData_ssigmay_get
    if _newclass:
        ssigmay = _swig_property(_amici.ReturnData_ssigmay_get, _amici.ReturnData_ssigmay_set)
    __swig_setmethods__["res"] = _amici.ReturnData_res_set
    __swig_getmethods__["res"] = _amici.ReturnData_res_get
    if _newclass:
        res = _swig_property(_amici.ReturnData_res_get, _amici.ReturnData_res_set)
    __swig_setmethods__["sres"] = _amici.ReturnData_sres_set
    __swig_getmethods__["sres"] = _amici.ReturnData_sres_get
    if _newclass:
        sres = _swig_property(_amici.ReturnData_sres_get, _amici.ReturnData_sres_set)
    __swig_setmethods__["FIM"] = _amici.ReturnData_FIM_set
    __swig_getmethods__["FIM"] = _amici.ReturnData_FIM_get
    if _newclass:
        FIM = _swig_property(_amici.ReturnData_FIM_get, _amici.ReturnData_FIM_set)
    __swig_setmethods__["numsteps"] = _amici.ReturnData_numsteps_set
    __swig_getmethods__["numsteps"] = _amici.ReturnData_numsteps_get
    if _newclass:
        numsteps = _swig_property(_amici.ReturnData_numsteps_get, _amici.ReturnData_numsteps_set)
    __swig_setmethods__["numstepsB"] = _amici.ReturnData_numstepsB_set
    __swig_getmethods__["numstepsB"] = _amici.ReturnData_numstepsB_get
    if _newclass:
        numstepsB = _swig_property(_amici.ReturnData_numstepsB_get, _amici.ReturnData_numstepsB_set)
    __swig_setmethods__["numrhsevals"] = _amici.ReturnData_numrhsevals_set
    __swig_getmethods__["numrhsevals"] = _amici.ReturnData_numrhsevals_get
    if _newclass:
        numrhsevals = _swig_property(_amici.ReturnData_numrhsevals_get, _amici.ReturnData_numrhsevals_set)
    __swig_setmethods__["numrhsevalsB"] = _amici.ReturnData_numrhsevalsB_set
    __swig_getmethods__["numrhsevalsB"] = _amici.ReturnData_numrhsevalsB_get
    if _newclass:
        numrhsevalsB = _swig_property(_amici.ReturnData_numrhsevalsB_get, _amici.ReturnData_numrhsevalsB_set)
    __swig_setmethods__["numerrtestfails"] = _amici.ReturnData_numerrtestfails_set
    __swig_getmethods__["numerrtestfails"] = _amici.ReturnData_numerrtestfails_get
    if _newclass:
        numerrtestfails = _swig_property(_amici.ReturnData_numerrtestfails_get, _amici.ReturnData_numerrtestfails_set)
    __swig_setmethods__["numerrtestfailsB"] = _amici.ReturnData_numerrtestfailsB_set
    __swig_getmethods__["numerrtestfailsB"] = _amici.ReturnData_numerrtestfailsB_get
    if _newclass:
        numerrtestfailsB = _swig_property(_amici.ReturnData_numerrtestfailsB_get, _amici.ReturnData_numerrtestfailsB_set)
    __swig_setmethods__["numnonlinsolvconvfails"] = _amici.ReturnData_numnonlinsolvconvfails_set
    __swig_getmethods__["numnonlinsolvconvfails"] = _amici.ReturnData_numnonlinsolvconvfails_get
    if _newclass:
        numnonlinsolvconvfails = _swig_property(_amici.ReturnData_numnonlinsolvconvfails_get, _amici.ReturnData_numnonlinsolvconvfails_set)
    __swig_setmethods__["numnonlinsolvconvfailsB"] = _amici.ReturnData_numnonlinsolvconvfailsB_set
    __swig_getmethods__["numnonlinsolvconvfailsB"] = _amici.ReturnData_numnonlinsolvconvfailsB_get
    if _newclass:
        numnonlinsolvconvfailsB = _swig_property(_amici.ReturnData_numnonlinsolvconvfailsB_get, _amici.ReturnData_numnonlinsolvconvfailsB_set)
    __swig_setmethods__["order"] = _amici.ReturnData_order_set
    __swig_getmethods__["order"] = _amici.ReturnData_order_get
    if _newclass:
        order = _swig_property(_amici.ReturnData_order_get, _amici.ReturnData_order_set)
    __swig_setmethods__["newton_status"] = _amici.ReturnData_newton_status_set
    __swig_getmethods__["newton_status"] = _amici.ReturnData_newton_status_get
    if _newclass:
        newton_status = _swig_property(_amici.ReturnData_newton_status_get, _amici.ReturnData_newton_status_set)
    __swig_setmethods__["newton_time"] = _amici.ReturnData_newton_time_set
    __swig_getmethods__["newton_time"] = _amici.ReturnData_newton_time_get
    if _newclass:
        newton_time = _swig_property(_amici.ReturnData_newton_time_get, _amici.ReturnData_newton_time_set)
    __swig_setmethods__["newton_numsteps"] = _amici.ReturnData_newton_numsteps_set
    __swig_getmethods__["newton_numsteps"] = _amici.ReturnData_newton_numsteps_get
    if _newclass:
        newton_numsteps = _swig_property(_amici.ReturnData_newton_numsteps_get, _amici.ReturnData_newton_numsteps_set)
    __swig_setmethods__["newton_numlinsteps"] = _amici.ReturnData_newton_numlinsteps_set
    __swig_getmethods__["newton_numlinsteps"] = _amici.ReturnData_newton_numlinsteps_get
    if _newclass:
        newton_numlinsteps = _swig_property(_amici.ReturnData_newton_numlinsteps_get, _amici.ReturnData_newton_numlinsteps_set)
    __swig_setmethods__["x0"] = _amici.ReturnData_x0_set
    __swig_getmethods__["x0"] = _amici.ReturnData_x0_get
    if _newclass:
        x0 = _swig_property(_amici.ReturnData_x0_get, _amici.ReturnData_x0_set)
    __swig_setmethods__["sx0"] = _amici.ReturnData_sx0_set
    __swig_getmethods__["sx0"] = _amici.ReturnData_sx0_get
    if _newclass:
        sx0 = _swig_property(_amici.ReturnData_sx0_get, _amici.ReturnData_sx0_set)
    __swig_setmethods__["llh"] = _amici.ReturnData_llh_set
    __swig_getmethods__["llh"] = _amici.ReturnData_llh_get
    if _newclass:
        llh = _swig_property(_amici.ReturnData_llh_get, _amici.ReturnData_llh_set)
    __swig_setmethods__["chi2"] = _amici.ReturnData_chi2_set
    __swig_getmethods__["chi2"] = _amici.ReturnData_chi2_get
    if _newclass:
        chi2 = _swig_property(_amici.ReturnData_chi2_get, _amici.ReturnData_chi2_set)
    __swig_setmethods__["sllh"] = _amici.ReturnData_sllh_set
    __swig_getmethods__["sllh"] = _amici.ReturnData_sllh_get
    if _newclass:
        sllh = _swig_property(_amici.ReturnData_sllh_get, _amici.ReturnData_sllh_set)
    __swig_setmethods__["s2llh"] = _amici.ReturnData_s2llh_set
    __swig_getmethods__["s2llh"] = _amici.ReturnData_s2llh_get
    if _newclass:
        s2llh = _swig_property(_amici.ReturnData_s2llh_get, _amici.ReturnData_s2llh_set)
    __swig_setmethods__["status"] = _amici.ReturnData_status_set
    __swig_getmethods__["status"] = _amici.ReturnData_status_get
    if _newclass:
        status = _swig_property(_amici.ReturnData_status_get, _amici.ReturnData_status_set)
    __swig_getmethods__["np"] = _amici.ReturnData_np_get
    if _newclass:
        np = _swig_property(_amici.ReturnData_np_get)
    __swig_getmethods__["nk"] = _amici.ReturnData_nk_get
    if _newclass:
        nk = _swig_property(_amici.ReturnData_nk_get)
    __swig_getmethods__["nx"] = _amici.ReturnData_nx_get
    if _newclass:
        nx = _swig_property(_amici.ReturnData_nx_get)
    __swig_getmethods__["nxtrue"] = _amici.ReturnData_nxtrue_get
    if _newclass:
        nxtrue = _swig_property(_amici.ReturnData_nxtrue_get)
    __swig_getmethods__["ny"] = _amici.ReturnData_ny_get
    if _newclass:
        ny = _swig_property(_amici.ReturnData_ny_get)
    __swig_getmethods__["nytrue"] = _amici.ReturnData_nytrue_get
    if _newclass:
        nytrue = _swig_property(_amici.ReturnData_nytrue_get)
    __swig_getmethods__["nz"] = _amici.ReturnData_nz_get
    if _newclass:
        nz = _swig_property(_amici.ReturnData_nz_get)
    __swig_getmethods__["nztrue"] = _amici.ReturnData_nztrue_get
    if _newclass:
        nztrue = _swig_property(_amici.ReturnData_nztrue_get)
    __swig_getmethods__["ne"] = _amici.ReturnData_ne_get
    if _newclass:
        ne = _swig_property(_amici.ReturnData_ne_get)
    __swig_getmethods__["nJ"] = _amici.ReturnData_nJ_get
    if _newclass:
        nJ = _swig_property(_amici.ReturnData_nJ_get)
    __swig_getmethods__["nplist"] = _amici.ReturnData_nplist_get
    if _newclass:
        nplist = _swig_property(_amici.ReturnData_nplist_get)
    __swig_getmethods__["nmaxevent"] = _amici.ReturnData_nmaxevent_get
    if _newclass:
        nmaxevent = _swig_property(_amici.ReturnData_nmaxevent_get)
    __swig_getmethods__["nt"] = _amici.ReturnData_nt_get
    if _newclass:
        nt = _swig_property(_amici.ReturnData_nt_get)
    __swig_getmethods__["newton_maxsteps"] = _amici.ReturnData_newton_maxsteps_get
    if _newclass:
        newton_maxsteps = _swig_property(_amici.ReturnData_newton_maxsteps_get)
    __swig_setmethods__["pscale"] = _amici.ReturnData_pscale_set
    __swig_getmethods__["pscale"] = _amici.ReturnData_pscale_get
    if _newclass:
        pscale = _swig_property(_amici.ReturnData_pscale_get, _amici.ReturnData_pscale_set)
    __swig_getmethods__["o2mode"] = _amici.ReturnData_o2mode_get
    if _newclass:
        o2mode = _swig_property(_amici.ReturnData_o2mode_get)
    __swig_getmethods__["sensi"] = _amici.ReturnData_sensi_get
    if _newclass:
        sensi = _swig_property(_amici.ReturnData_sensi_get)
    __swig_getmethods__["sensi_meth"] = _amici.ReturnData_sensi_meth_get
    if _newclass:
        sensi_meth = _swig_property(_amici.ReturnData_sensi_meth_get)
ReturnData_swigregister = _amici.ReturnData_swigregister
ReturnData_swigregister(ReturnData)

class Solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amici.delete_Solver
    __del__ = lambda self: None

    def clone(self):
        return _amici.Solver_clone(self)

    def setupAMI(self, fwd, model):
        return _amici.Solver_setupAMI(self, fwd, model)

    def setupAMIB(self, bwd, model):
        return _amici.Solver_setupAMIB(self, bwd, model)

    def AMIGetSens(self, tret, yySout):
        return _amici.Solver_AMIGetSens(self, tret, yySout)

    def getDiagnosis(self, it, rdata):
        return _amici.Solver_getDiagnosis(self, it, rdata)

    def getDiagnosisB(self, it, rdata, bwd):
        return _amici.Solver_getDiagnosisB(self, it, rdata, bwd)

    def AMIGetRootInfo(self, rootsfound):
        return _amici.Solver_AMIGetRootInfo(self, rootsfound)

    def AMIReInit(self, t0, yy0, yp0):
        return _amici.Solver_AMIReInit(self, t0, yy0, yp0)

    def AMISensReInit(self, ism, yS0, ypS0):
        return _amici.Solver_AMISensReInit(self, ism, yS0, ypS0)

    def AMICalcIC(self, tout1, x, dx):
        return _amici.Solver_AMICalcIC(self, tout1, x, dx)

    def AMICalcICB(self, which, tout1, xB, dxB):
        return _amici.Solver_AMICalcICB(self, which, tout1, xB, dxB)

    def AMISolve(self, tout, yret, ypret, tret, itask):
        return _amici.Solver_AMISolve(self, tout, yret, ypret, tret, itask)

    def AMISolveF(self, tout, yret, ypret, tret, itask, ncheckPtr):
        return _amici.Solver_AMISolveF(self, tout, yret, ypret, tret, itask, ncheckPtr)

    def AMISolveB(self, tBout, itaskB):
        return _amici.Solver_AMISolveB(self, tBout, itaskB)

    def AMISetStopTime(self, tstop):
        return _amici.Solver_AMISetStopTime(self, tstop)

    def AMIReInitB(self, which, tB0, yyB0, ypB0):
        return _amici.Solver_AMIReInitB(self, which, tB0, yyB0, ypB0)

    def AMIGetB(self, which, tret, yy, yp):
        return _amici.Solver_AMIGetB(self, which, tret, yy, yp)

    def AMIGetQuadB(self, which, tret, qB):
        return _amici.Solver_AMIGetQuadB(self, which, tret, qB)

    def AMIQuadReInitB(self, which, yQB0):
        return _amici.Solver_AMIQuadReInitB(self, which, yQB0)

    def turnOffRootFinding(self):
        return _amici.Solver_turnOffRootFinding(self)

    def getSensitivityMethod(self):
        return _amici.Solver_getSensitivityMethod(self)

    def setSensitivityMethod(self, sensi_meth):
        return _amici.Solver_setSensitivityMethod(self, sensi_meth)

    def getNewtonMaxSteps(self):
        return _amici.Solver_getNewtonMaxSteps(self)

    def setNewtonMaxSteps(self, newton_maxsteps):
        return _amici.Solver_setNewtonMaxSteps(self, newton_maxsteps)

    def getNewtonPreequilibration(self):
        return _amici.Solver_getNewtonPreequilibration(self)

    def setNewtonPreequilibration(self, newton_preeq):
        return _amici.Solver_setNewtonPreequilibration(self, newton_preeq)

    def getNewtonMaxLinearSteps(self):
        return _amici.Solver_getNewtonMaxLinearSteps(self)

    def setNewtonMaxLinearSteps(self, newton_maxlinsteps):
        return _amici.Solver_setNewtonMaxLinearSteps(self, newton_maxlinsteps)

    def getSensitivityOrder(self):
        return _amici.Solver_getSensitivityOrder(self)

    def setSensitivityOrder(self, sensi):
        return _amici.Solver_setSensitivityOrder(self, sensi)

    def getRelativeTolerance(self):
        return _amici.Solver_getRelativeTolerance(self)

    def setRelativeTolerance(self, rtol):
        return _amici.Solver_setRelativeTolerance(self, rtol)

    def getAbsoluteTolerance(self):
        return _amici.Solver_getAbsoluteTolerance(self)

    def setAbsoluteTolerance(self, atol):
        return _amici.Solver_setAbsoluteTolerance(self, atol)

    def getRelativeToleranceQuadratures(self):
        return _amici.Solver_getRelativeToleranceQuadratures(self)

    def setRelativeToleranceQuadratures(self, rtol):
        return _amici.Solver_setRelativeToleranceQuadratures(self, rtol)

    def getAbsoluteToleranceQuadratures(self):
        return _amici.Solver_getAbsoluteToleranceQuadratures(self)

    def setAbsoluteToleranceQuadratures(self, atol):
        return _amici.Solver_setAbsoluteToleranceQuadratures(self, atol)

    def getMaxSteps(self):
        return _amici.Solver_getMaxSteps(self)

    def setMaxSteps(self, maxsteps):
        return _amici.Solver_setMaxSteps(self, maxsteps)

    def getMaxStepsBackwardProblem(self):
        return _amici.Solver_getMaxStepsBackwardProblem(self)

    def setMaxStepsBackwardProblem(self, maxsteps):
        return _amici.Solver_setMaxStepsBackwardProblem(self, maxsteps)

    def getLinearMultistepMethod(self):
        return _amici.Solver_getLinearMultistepMethod(self)

    def setLinearMultistepMethod(self, lmm):
        return _amici.Solver_setLinearMultistepMethod(self, lmm)

    def getNonlinearSolverIteration(self):
        return _amici.Solver_getNonlinearSolverIteration(self)

    def setNonlinearSolverIteration(self, iter):
        return _amici.Solver_setNonlinearSolverIteration(self, iter)

    def getInterpolationType(self):
        return _amici.Solver_getInterpolationType(self)

    def setInterpolationType(self, interpType):
        return _amici.Solver_setInterpolationType(self, interpType)

    def getStateOrdering(self):
        return _amici.Solver_getStateOrdering(self)

    def setStateOrdering(self, ordering):
        return _amici.Solver_setStateOrdering(self, ordering)

    def getStabilityLimitFlag(self):
        return _amici.Solver_getStabilityLimitFlag(self)

    def setStabilityLimitFlag(self, stldet):
        return _amici.Solver_setStabilityLimitFlag(self, stldet)

    def getLinearSolver(self):
        return _amici.Solver_getLinearSolver(self)

    def setLinearSolver(self, linsol):
        return _amici.Solver_setLinearSolver(self, linsol)

    def getInternalSensitivityMethod(self):
        return _amici.Solver_getInternalSensitivityMethod(self)

    def setInternalSensitivityMethod(self, ism):
        return _amici.Solver_setInternalSensitivityMethod(self, ism)
Solver_swigregister = _amici.Solver_swigregister
Solver_swigregister(Solver)

class IDASolver(Solver):
    __swig_setmethods__ = {}
    for _s in [Solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDASolver, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IDASolver, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _amici.new_IDASolver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _amici.IDASolver_clone(self)

    def AMICreate(self, lmm, iter):
        return _amici.IDASolver_AMICreate(self, lmm, iter)

    def AMISStolerances(self, rtol, atol):
        return _amici.IDASolver_AMISStolerances(self, rtol, atol)

    def AMISensSStolerances(self, rtol, atol):
        return _amici.IDASolver_AMISensSStolerances(self, rtol, atol)

    def AMISetSensErrCon(self, error_corr):
        return _amici.IDASolver_AMISetSensErrCon(self, error_corr)

    def AMISetQuadErrConB(self, which, flag):
        return _amici.IDASolver_AMISetQuadErrConB(self, which, flag)

    def AMIGetRootInfo(self, rootsfound):
        return _amici.IDASolver_AMIGetRootInfo(self, rootsfound)

    def AMISetErrHandlerFn(self):
        return _amici.IDASolver_AMISetErrHandlerFn(self)

    def AMISetUserData(self, model):
        return _amici.IDASolver_AMISetUserData(self, model)

    def AMISetUserDataB(self, which, model):
        return _amici.IDASolver_AMISetUserDataB(self, which, model)

    def AMISetMaxNumSteps(self, mxsteps):
        return _amici.IDASolver_AMISetMaxNumSteps(self, mxsteps)

    def AMISetStabLimDet(self, stldet):
        return _amici.IDASolver_AMISetStabLimDet(self, stldet)

    def AMISetStabLimDetB(self, which, stldet):
        return _amici.IDASolver_AMISetStabLimDetB(self, which, stldet)

    def AMISetId(self, model):
        return _amici.IDASolver_AMISetId(self, model)

    def AMISetSuppressAlg(self, flag):
        return _amici.IDASolver_AMISetSuppressAlg(self, flag)

    def AMIReInit(self, t0, yy0, yp0):
        return _amici.IDASolver_AMIReInit(self, t0, yy0, yp0)

    def AMISensReInit(self, ism, yS0, ypS0):
        return _amici.IDASolver_AMISensReInit(self, ism, yS0, ypS0)

    def AMISetSensParams(self, p, pbar, plist):
        return _amici.IDASolver_AMISetSensParams(self, p, pbar, plist)

    def AMIGetDky(self, t, k, dky):
        return _amici.IDASolver_AMIGetDky(self, t, k, dky)

    def AMIGetSens(self, tret, yySout):
        return _amici.IDASolver_AMIGetSens(self, tret, yySout)

    def AMIFree(self):
        return _amici.IDASolver_AMIFree(self)

    def AMIAdjInit(self, steps, interp):
        return _amici.IDASolver_AMIAdjInit(self, steps, interp)

    def AMICreateB(self, lmm, iter, which):
        return _amici.IDASolver_AMICreateB(self, lmm, iter, which)

    def AMIReInitB(self, which, tB0, yyB0, ypB0):
        return _amici.IDASolver_AMIReInitB(self, which, tB0, yyB0, ypB0)

    def AMISStolerancesB(self, which, relTolB, absTolB):
        return _amici.IDASolver_AMISStolerancesB(self, which, relTolB, absTolB)

    def AMIQuadReInitB(self, which, yQB0):
        return _amici.IDASolver_AMIQuadReInitB(self, which, yQB0)

    def AMIQuadSStolerancesB(self, which, reltolQB, abstolQB):
        return _amici.IDASolver_AMIQuadSStolerancesB(self, which, reltolQB, abstolQB)

    def AMISolve(self, tout, yret, ypret, tret, itask):
        return _amici.IDASolver_AMISolve(self, tout, yret, ypret, tret, itask)

    def AMISolveF(self, tout, yret, ypret, tret, itask, ncheckPtr):
        return _amici.IDASolver_AMISolveF(self, tout, yret, ypret, tret, itask, ncheckPtr)

    def AMISolveB(self, tBout, itaskB):
        return _amici.IDASolver_AMISolveB(self, tBout, itaskB)

    def AMISetMaxNumStepsB(self, which, mxstepsB):
        return _amici.IDASolver_AMISetMaxNumStepsB(self, which, mxstepsB)

    def AMIGetB(self, which, tret, yy, yp):
        return _amici.IDASolver_AMIGetB(self, which, tret, yy, yp)

    def AMIGetQuadB(self, which, tret, qB):
        return _amici.IDASolver_AMIGetQuadB(self, which, tret, qB)

    def AMIDense(self, nx):
        return _amici.IDASolver_AMIDense(self, nx)

    def AMIDenseB(self, which, nx):
        return _amici.IDASolver_AMIDenseB(self, which, nx)

    def AMIBand(self, nx, ubw, lbw):
        return _amici.IDASolver_AMIBand(self, nx, ubw, lbw)

    def AMIBandB(self, which, nx, ubw, lbw):
        return _amici.IDASolver_AMIBandB(self, which, nx, ubw, lbw)

    def AMIDiag(self):
        return _amici.IDASolver_AMIDiag(self)

    def AMIDiagB(self, which):
        return _amici.IDASolver_AMIDiagB(self, which)

    def AMISpgmr(self, prectype, maxl):
        return _amici.IDASolver_AMISpgmr(self, prectype, maxl)

    def AMISpgmrB(self, which, prectype, maxl):
        return _amici.IDASolver_AMISpgmrB(self, which, prectype, maxl)

    def AMISpbcg(self, prectype, maxl):
        return _amici.IDASolver_AMISpbcg(self, prectype, maxl)

    def AMISpbcgB(self, which, prectype, maxl):
        return _amici.IDASolver_AMISpbcgB(self, which, prectype, maxl)

    def AMISptfqmr(self, prectype, maxl):
        return _amici.IDASolver_AMISptfqmr(self, prectype, maxl)

    def AMISptfqmrB(self, which, prectype, maxl):
        return _amici.IDASolver_AMISptfqmrB(self, which, prectype, maxl)

    def AMIKLU(self, nx, nnz, sparsetype):
        return _amici.IDASolver_AMIKLU(self, nx, nnz, sparsetype)

    def AMIKLUSetOrdering(self, ordering):
        return _amici.IDASolver_AMIKLUSetOrdering(self, ordering)

    def AMIKLUSetOrderingB(self, which, ordering):
        return _amici.IDASolver_AMIKLUSetOrderingB(self, which, ordering)

    def AMIKLUB(self, which, nx, nnz, sparsetype):
        return _amici.IDASolver_AMIKLUB(self, which, nx, nnz, sparsetype)

    def AMIGetNumSteps(self, ami_mem, numsteps):
        return _amici.IDASolver_AMIGetNumSteps(self, ami_mem, numsteps)

    def AMIGetNumRhsEvals(self, ami_mem, numrhsevals):
        return _amici.IDASolver_AMIGetNumRhsEvals(self, ami_mem, numrhsevals)

    def AMIGetNumErrTestFails(self, ami_mem, numerrtestfails):
        return _amici.IDASolver_AMIGetNumErrTestFails(self, ami_mem, numerrtestfails)

    def AMIGetNumNonlinSolvConvFails(self, ami_mem, numnonlinsolvconvfails):
        return _amici.IDASolver_AMIGetNumNonlinSolvConvFails(self, ami_mem, numnonlinsolvconvfails)

    def AMIGetLastOrder(self, ami_mem, order):
        return _amici.IDASolver_AMIGetLastOrder(self, ami_mem, order)

    def AMIGetAdjBmem(self, ami_mem, which):
        return _amici.IDASolver_AMIGetAdjBmem(self, ami_mem, which)

    def AMICalcIC(self, tout1, x, dx):
        return _amici.IDASolver_AMICalcIC(self, tout1, x, dx)

    def AMICalcICB(self, which, tout1, xB, dxB):
        return _amici.IDASolver_AMICalcICB(self, which, tout1, xB, dxB)

    def AMISetStopTime(self, tstop):
        return _amici.IDASolver_AMISetStopTime(self, tstop)

    def turnOffRootFinding(self):
        return _amici.IDASolver_turnOffRootFinding(self)
    __swig_destroy__ = _amici.delete_IDASolver
    __del__ = lambda self: None
IDASolver_swigregister = _amici.IDASolver_swigregister
IDASolver_swigregister(IDASolver)

class CVodeSolver(Solver):
    __swig_setmethods__ = {}
    for _s in [Solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVodeSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVodeSolver, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _amici.new_CVodeSolver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _amici.CVodeSolver_clone(self)

    def AMICreate(self, lmm, iter):
        return _amici.CVodeSolver_AMICreate(self, lmm, iter)

    def AMISStolerances(self, rtol, atol):
        return _amici.CVodeSolver_AMISStolerances(self, rtol, atol)

    def AMISensSStolerances(self, rtol, atol):
        return _amici.CVodeSolver_AMISensSStolerances(self, rtol, atol)

    def AMISetSensErrCon(self, error_corr):
        return _amici.CVodeSolver_AMISetSensErrCon(self, error_corr)

    def AMISetQuadErrConB(self, which, flag):
        return _amici.CVodeSolver_AMISetQuadErrConB(self, which, flag)

    def AMIGetRootInfo(self, rootsfound):
        return _amici.CVodeSolver_AMIGetRootInfo(self, rootsfound)

    def AMISetErrHandlerFn(self):
        return _amici.CVodeSolver_AMISetErrHandlerFn(self)

    def AMISetUserData(self, model):
        return _amici.CVodeSolver_AMISetUserData(self, model)

    def AMISetUserDataB(self, which, model):
        return _amici.CVodeSolver_AMISetUserDataB(self, which, model)

    def AMISetMaxNumSteps(self, mxsteps):
        return _amici.CVodeSolver_AMISetMaxNumSteps(self, mxsteps)

    def AMISetStabLimDet(self, stldet):
        return _amici.CVodeSolver_AMISetStabLimDet(self, stldet)

    def AMISetStabLimDetB(self, which, stldet):
        return _amici.CVodeSolver_AMISetStabLimDetB(self, which, stldet)

    def AMISetId(self, model):
        return _amici.CVodeSolver_AMISetId(self, model)

    def AMISetSuppressAlg(self, flag):
        return _amici.CVodeSolver_AMISetSuppressAlg(self, flag)

    def AMIReInit(self, t0, yy0, yp0):
        return _amici.CVodeSolver_AMIReInit(self, t0, yy0, yp0)

    def AMISensReInit(self, ism, yS0, ypS0):
        return _amici.CVodeSolver_AMISensReInit(self, ism, yS0, ypS0)

    def AMISetSensParams(self, p, pbar, plist):
        return _amici.CVodeSolver_AMISetSensParams(self, p, pbar, plist)

    def AMIGetDky(self, t, k, dky):
        return _amici.CVodeSolver_AMIGetDky(self, t, k, dky)

    def AMIGetSens(self, tret, yySout):
        return _amici.CVodeSolver_AMIGetSens(self, tret, yySout)

    def AMIFree(self):
        return _amici.CVodeSolver_AMIFree(self)

    def AMIAdjInit(self, steps, interp):
        return _amici.CVodeSolver_AMIAdjInit(self, steps, interp)

    def AMICreateB(self, lmm, iter, which):
        return _amici.CVodeSolver_AMICreateB(self, lmm, iter, which)

    def AMIReInitB(self, which, tB0, yyB0, ypB0):
        return _amici.CVodeSolver_AMIReInitB(self, which, tB0, yyB0, ypB0)

    def AMISStolerancesB(self, which, relTolB, absTolB):
        return _amici.CVodeSolver_AMISStolerancesB(self, which, relTolB, absTolB)

    def AMIQuadReInitB(self, which, yQB0):
        return _amici.CVodeSolver_AMIQuadReInitB(self, which, yQB0)

    def AMIQuadSStolerancesB(self, which, reltolQB, abstolQB):
        return _amici.CVodeSolver_AMIQuadSStolerancesB(self, which, reltolQB, abstolQB)

    def AMISolve(self, tout, yret, ypret, tret, itask):
        return _amici.CVodeSolver_AMISolve(self, tout, yret, ypret, tret, itask)

    def AMISolveF(self, tout, yret, ypret, tret, itask, ncheckPtr):
        return _amici.CVodeSolver_AMISolveF(self, tout, yret, ypret, tret, itask, ncheckPtr)
    if _newclass:
        fxdot = staticmethod(_amici.CVodeSolver_fxdot)
    else:
        fxdot = _amici.CVodeSolver_fxdot
    if _newclass:
        fJSparse = staticmethod(_amici.CVodeSolver_fJSparse)
    else:
        fJSparse = _amici.CVodeSolver_fJSparse
    if _newclass:
        fJ = staticmethod(_amici.CVodeSolver_fJ)
    else:
        fJ = _amici.CVodeSolver_fJ

    def AMISolveB(self, tBout, itaskB):
        return _amici.CVodeSolver_AMISolveB(self, tBout, itaskB)

    def AMISetMaxNumStepsB(self, which, mxstepsB):
        return _amici.CVodeSolver_AMISetMaxNumStepsB(self, which, mxstepsB)

    def AMIGetB(self, which, tret, yy, yp):
        return _amici.CVodeSolver_AMIGetB(self, which, tret, yy, yp)

    def AMIGetQuadB(self, which, tret, qB):
        return _amici.CVodeSolver_AMIGetQuadB(self, which, tret, qB)

    def AMIDense(self, nx):
        return _amici.CVodeSolver_AMIDense(self, nx)

    def AMIDenseB(self, which, nx):
        return _amici.CVodeSolver_AMIDenseB(self, which, nx)

    def AMIBand(self, nx, ubw, lbw):
        return _amici.CVodeSolver_AMIBand(self, nx, ubw, lbw)

    def AMIBandB(self, which, nx, ubw, lbw):
        return _amici.CVodeSolver_AMIBandB(self, which, nx, ubw, lbw)

    def AMIDiag(self):
        return _amici.CVodeSolver_AMIDiag(self)

    def AMIDiagB(self, which):
        return _amici.CVodeSolver_AMIDiagB(self, which)

    def AMISpgmr(self, prectype, maxl):
        return _amici.CVodeSolver_AMISpgmr(self, prectype, maxl)

    def AMISpgmrB(self, which, prectype, maxl):
        return _amici.CVodeSolver_AMISpgmrB(self, which, prectype, maxl)

    def AMISpbcg(self, prectype, maxl):
        return _amici.CVodeSolver_AMISpbcg(self, prectype, maxl)

    def AMISpbcgB(self, which, prectype, maxl):
        return _amici.CVodeSolver_AMISpbcgB(self, which, prectype, maxl)

    def AMISptfqmr(self, prectype, maxl):
        return _amici.CVodeSolver_AMISptfqmr(self, prectype, maxl)

    def AMISptfqmrB(self, which, prectype, maxl):
        return _amici.CVodeSolver_AMISptfqmrB(self, which, prectype, maxl)

    def AMIKLU(self, nx, nnz, sparsetype):
        return _amici.CVodeSolver_AMIKLU(self, nx, nnz, sparsetype)

    def AMIKLUSetOrdering(self, ordering):
        return _amici.CVodeSolver_AMIKLUSetOrdering(self, ordering)

    def AMIKLUSetOrderingB(self, which, ordering):
        return _amici.CVodeSolver_AMIKLUSetOrderingB(self, which, ordering)

    def AMIKLUB(self, which, nx, nnz, sparsetype):
        return _amici.CVodeSolver_AMIKLUB(self, which, nx, nnz, sparsetype)

    def AMIGetNumSteps(self, ami_mem, numsteps):
        return _amici.CVodeSolver_AMIGetNumSteps(self, ami_mem, numsteps)

    def AMIGetNumRhsEvals(self, ami_mem, numrhsevals):
        return _amici.CVodeSolver_AMIGetNumRhsEvals(self, ami_mem, numrhsevals)

    def AMIGetNumErrTestFails(self, ami_mem, numerrtestfails):
        return _amici.CVodeSolver_AMIGetNumErrTestFails(self, ami_mem, numerrtestfails)

    def AMIGetNumNonlinSolvConvFails(self, ami_mem, numnonlinsolvconvfails):
        return _amici.CVodeSolver_AMIGetNumNonlinSolvConvFails(self, ami_mem, numnonlinsolvconvfails)

    def AMIGetLastOrder(self, ami_ami_mem, order):
        return _amici.CVodeSolver_AMIGetLastOrder(self, ami_ami_mem, order)

    def AMIGetAdjBmem(self, ami_mem, which):
        return _amici.CVodeSolver_AMIGetAdjBmem(self, ami_mem, which)

    def AMICalcIC(self, tout1, x, dx):
        return _amici.CVodeSolver_AMICalcIC(self, tout1, x, dx)

    def AMICalcICB(self, which, tout1, xB, dxB):
        return _amici.CVodeSolver_AMICalcICB(self, which, tout1, xB, dxB)

    def AMISetStopTime(self, tstop):
        return _amici.CVodeSolver_AMISetStopTime(self, tstop)

    def turnOffRootFinding(self):
        return _amici.CVodeSolver_turnOffRootFinding(self)
    __swig_destroy__ = _amici.delete_CVodeSolver
    __del__ = lambda self: None
CVodeSolver_swigregister = _amici.CVodeSolver_swigregister
CVodeSolver_swigregister(CVodeSolver)

def CVodeSolver_fxdot(t, x, xdot, user_data):
    return _amici.CVodeSolver_fxdot(t, x, xdot, user_data)
CVodeSolver_fxdot = _amici.CVodeSolver_fxdot

def CVodeSolver_fJSparse(t, x, xdot, J, user_data, tmp1, tmp2, tmp3):
    return _amici.CVodeSolver_fJSparse(t, x, xdot, J, user_data, tmp1, tmp2, tmp3)
CVodeSolver_fJSparse = _amici.CVodeSolver_fJSparse

def CVodeSolver_fJ(N, t, x, xdot, J, user_data, tmp1, tmp2, tmp3):
    return _amici.CVodeSolver_fJ(N, t, x, xdot, J, user_data, tmp1, tmp2, tmp3)
CVodeSolver_fJ = _amici.CVodeSolver_fJ

class Model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _amici.delete_Model
    __del__ = lambda self: None

    def clone(self):
        return _amici.Model_clone(self)

    def getSolver(self):
        return _amici.Model_getSolver(self)

    def froot(self, t, x, dx, root):
        return _amici.Model_froot(self, t, x, dx, root)

    def fxdot(self, t, x, dx, xdot):
        return _amici.Model_fxdot(self, t, x, dx, xdot)

    def fJ(self, t, cj, x, dx, xdot, J):
        return _amici.Model_fJ(self, t, cj, x, dx, xdot, J)

    def fJSparse(self, t, cj, x, dx, xdot, J):
        return _amici.Model_fJSparse(self, t, cj, x, dx, xdot, J)

    def fJDiag(self, t, Jdiag, cj, x, dx):
        return _amici.Model_fJDiag(self, t, Jdiag, cj, x, dx)

    def fdxdotdp(self, t, x, dx):
        return _amici.Model_fdxdotdp(self, t, x, dx)

    def fJv(self, t, x, dx, xdot, v, nJv, cj):
        return _amici.Model_fJv(self, t, x, dx, xdot, v, nJv, cj)

    def fx0(self, x):
        return _amici.Model_fx0(self, x)

    def fdx0(self, x0, dx0):
        return _amici.Model_fdx0(self, x0, dx0)

    def fsx0(self, sx, x):
        return _amici.Model_fsx0(self, sx, x)

    def fsdx0(self):
        return _amici.Model_fsdx0(self)

    def fstau(self, t, ie, x, sx):
        return _amici.Model_fstau(self, t, ie, x, sx)

    def fy(self, it, rdata):
        return _amici.Model_fy(self, it, rdata)

    def fdydp(self, it, rdata):
        return _amici.Model_fdydp(self, it, rdata)

    def fdydx(self, it, rdata):
        return _amici.Model_fdydx(self, it, rdata)

    def fz(self, nroots, ie, t, x, rdata):
        return _amici.Model_fz(self, nroots, ie, t, x, rdata)

    def fsz(self, nroots, ie, t, x, sx, rdata):
        return _amici.Model_fsz(self, nroots, ie, t, x, sx, rdata)

    def frz(self, nroots, ie, t, x, rdata):
        return _amici.Model_frz(self, nroots, ie, t, x, rdata)

    def fsrz(self, nroots, ie, t, x, sx, rdata):
        return _amici.Model_fsrz(self, nroots, ie, t, x, sx, rdata)

    def fdzdp(self, t, ie, x):
        return _amici.Model_fdzdp(self, t, ie, x)

    def fdzdx(self, t, ie, x):
        return _amici.Model_fdzdx(self, t, ie, x)

    def fdrzdp(self, t, ie, x):
        return _amici.Model_fdrzdp(self, t, ie, x)

    def fdrzdx(self, t, ie, x):
        return _amici.Model_fdrzdx(self, t, ie, x)

    def fdeltax(self, ie, t, x, xdot, xdot_old):
        return _amici.Model_fdeltax(self, ie, t, x, xdot, xdot_old)

    def fdeltasx(self, ie, t, x, sx, xdot, xdot_old):
        return _amici.Model_fdeltasx(self, ie, t, x, sx, xdot, xdot_old)

    def fdeltaxB(self, ie, t, x, xB, xdot, xdot_old):
        return _amici.Model_fdeltaxB(self, ie, t, x, xB, xdot, xdot_old)

    def fdeltaqB(self, ie, t, x, xB, xdot, xdot_old):
        return _amici.Model_fdeltaqB(self, ie, t, x, xB, xdot, xdot_old)

    def fsigmay(self, it, edata, rdata):
        return _amici.Model_fsigmay(self, it, edata, rdata)

    def fdsigmaydp(self, it, rdata, edata):
        return _amici.Model_fdsigmaydp(self, it, rdata, edata)

    def fsigmaz(self, t, ie, nroots, edata, rdata):
        return _amici.Model_fsigmaz(self, t, ie, nroots, edata, rdata)

    def fdsigmazdp(self, t):
        return _amici.Model_fdsigmazdp(self, t)

    def fJy(self, it, rdata, edata):
        return _amici.Model_fJy(self, it, rdata, edata)

    def fJz(self, nroots, rdata, edata):
        return _amici.Model_fJz(self, nroots, rdata, edata)

    def fJrz(self, nroots, rdata, edata):
        return _amici.Model_fJrz(self, nroots, rdata, edata)

    def fdJydy(self, it, rdata, edata):
        return _amici.Model_fdJydy(self, it, rdata, edata)

    def fdJydsigma(self, it, rdata, edata):
        return _amici.Model_fdJydsigma(self, it, rdata, edata)

    def fdJzdz(self, nroots, rdata, edata):
        return _amici.Model_fdJzdz(self, nroots, rdata, edata)

    def fdJzdsigma(self, nroots, rdata, edata):
        return _amici.Model_fdJzdsigma(self, nroots, rdata, edata)

    def fdJrzdz(self, nroots, rdata, edata):
        return _amici.Model_fdJrzdz(self, nroots, rdata, edata)

    def fdJrzdsigma(self, nroots, rdata, edata):
        return _amici.Model_fdJrzdsigma(self, nroots, rdata, edata)

    def fsy(self, it, rdata):
        return _amici.Model_fsy(self, it, rdata)

    def fsz_tf(self, nroots, ie, rdata):
        return _amici.Model_fsz_tf(self, nroots, ie, rdata)

    def fsJy(self, it, dJydx, rdata):
        return _amici.Model_fsJy(self, it, dJydx, rdata)

    def fdJydp(self, it, edata, rdata):
        return _amici.Model_fdJydp(self, it, edata, rdata)

    def fdJydx(self, dJydx, it, edata, rdata):
        return _amici.Model_fdJydx(self, dJydx, it, edata, rdata)

    def fsJz(self, nroots, dJzdx, sx, rdata):
        return _amici.Model_fsJz(self, nroots, dJzdx, sx, rdata)

    def fdJzdp(self, nroots, t, edata, rdata):
        return _amici.Model_fdJzdp(self, nroots, t, edata, rdata)

    def fdJzdx(self, dJzdx, nroots, t, edata, rdata):
        return _amici.Model_fdJzdx(self, dJzdx, nroots, t, edata, rdata)

    def initialize(self, x, dx):
        return _amici.Model_initialize(self, x, dx)

    def initializeStates(self, x):
        return _amici.Model_initializeStates(self, x)

    def initHeaviside(self, x, dx):
        return _amici.Model_initHeaviside(self, x, dx)

    def nplist(self):
        return _amici.Model_nplist(self)

    def np(self):
        return _amici.Model_np(self)

    def nk(self):
        return _amici.Model_nk(self)

    def k(self):
        return _amici.Model_k(self)

    def nMaxEvent(self):
        return _amici.Model_nMaxEvent(self)

    def setNMaxEvent(self, nmaxevent):
        return _amici.Model_setNMaxEvent(self, nmaxevent)

    def nt(self):
        return _amici.Model_nt(self)

    def getParameterScale(self):
        return _amici.Model_getParameterScale(self)

    def setParameterScale(self, *args):
        return _amici.Model_setParameterScale(self, *args)

    def getParameters(self):
        return _amici.Model_getParameters(self)

    def setParameters(self, p):
        return _amici.Model_setParameters(self, p)

    def getUnscaledParameters(self):
        return _amici.Model_getUnscaledParameters(self)

    def getFixedParameters(self):
        return _amici.Model_getFixedParameters(self)

    def setFixedParameters(self, k):
        return _amici.Model_setFixedParameters(self, k)

    def getTimepoints(self):
        return _amici.Model_getTimepoints(self)

    def setTimepoints(self, ts):
        return _amici.Model_setTimepoints(self, ts)

    def t(self, idx):
        return _amici.Model_t(self, idx)

    def getParameterList(self):
        return _amici.Model_getParameterList(self)

    def setParameterList(self, plist):
        return _amici.Model_setParameterList(self, plist)

    def getInitialStates(self):
        return _amici.Model_getInitialStates(self)

    def setInitialStates(self, x0):
        return _amici.Model_setInitialStates(self, x0)

    def getInitialStateSensitivities(self):
        return _amici.Model_getInitialStateSensitivities(self)

    def setInitialStateSensitivities(self, sx0):
        return _amici.Model_setInitialStateSensitivities(self, sx0)

    def t0(self):
        return _amici.Model_t0(self)

    def setT0(self, t0):
        return _amici.Model_setT0(self, t0)

    def plist(self, pos):
        return _amici.Model_plist(self, pos)

    def unscaleParameters(self, bufferUnscaled):
        return _amici.Model_unscaleParameters(self, bufferUnscaled)

    def requireSensitivitiesForAllParameters(self):
        return _amici.Model_requireSensitivitiesForAllParameters(self)

    def fw(self, t, x):
        return _amici.Model_fw(self, t, x)

    def fdwdp(self, t, x):
        return _amici.Model_fdwdp(self, t, x)

    def fdwdx(self, t, x):
        return _amici.Model_fdwdx(self, t, x)

    def fres(self, it, rdata, edata):
        return _amici.Model_fres(self, it, rdata, edata)

    def fchi2(self, it, rdata):
        return _amici.Model_fchi2(self, it, rdata)

    def fsres(self, it, rdata, edata):
        return _amici.Model_fsres(self, it, rdata, edata)

    def fFIM(self, it, rdata):
        return _amici.Model_fFIM(self, it, rdata)

    def updateHeaviside(self, rootsfound):
        return _amici.Model_updateHeaviside(self, rootsfound)

    def updateHeavisideB(self, rootsfound):
        return _amici.Model_updateHeavisideB(self, rootsfound)

    def gett(self, it, rdata):
        return _amici.Model_gett(self, it, rdata)

    def checkFinite(self, N, array, fun):
        return _amici.Model_checkFinite(self, N, array, fun)

    def hasParameterNames(self):
        return _amici.Model_hasParameterNames(self)

    def getParameterNames(self):
        return _amici.Model_getParameterNames(self)

    def hasStateNames(self):
        return _amici.Model_hasStateNames(self)

    def getStateNames(self):
        return _amici.Model_getStateNames(self)

    def hasFixedParameterNames(self):
        return _amici.Model_hasFixedParameterNames(self)

    def getFixedParameterNames(self):
        return _amici.Model_getFixedParameterNames(self)

    def hasObservableNames(self):
        return _amici.Model_hasObservableNames(self)

    def getObservableNames(self):
        return _amici.Model_getObservableNames(self)

    def hasParameterIds(self):
        return _amici.Model_hasParameterIds(self)

    def getParameterIds(self):
        return _amici.Model_getParameterIds(self)

    def hasStateIds(self):
        return _amici.Model_hasStateIds(self)

    def getStateIds(self):
        return _amici.Model_getStateIds(self)

    def hasFixedParameterIds(self):
        return _amici.Model_hasFixedParameterIds(self)

    def getFixedParameterIds(self):
        return _amici.Model_getFixedParameterIds(self)

    def hasObservableIds(self):
        return _amici.Model_hasObservableIds(self)

    def getObservableIds(self):
        return _amici.Model_getObservableIds(self)
    __swig_getmethods__["nx"] = _amici.Model_nx_get
    if _newclass:
        nx = _swig_property(_amici.Model_nx_get)
    __swig_getmethods__["nxtrue"] = _amici.Model_nxtrue_get
    if _newclass:
        nxtrue = _swig_property(_amici.Model_nxtrue_get)
    __swig_getmethods__["ny"] = _amici.Model_ny_get
    if _newclass:
        ny = _swig_property(_amici.Model_ny_get)
    __swig_getmethods__["nytrue"] = _amici.Model_nytrue_get
    if _newclass:
        nytrue = _swig_property(_amici.Model_nytrue_get)
    __swig_getmethods__["nz"] = _amici.Model_nz_get
    if _newclass:
        nz = _swig_property(_amici.Model_nz_get)
    __swig_getmethods__["nztrue"] = _amici.Model_nztrue_get
    if _newclass:
        nztrue = _swig_property(_amici.Model_nztrue_get)
    __swig_getmethods__["ne"] = _amici.Model_ne_get
    if _newclass:
        ne = _swig_property(_amici.Model_ne_get)
    __swig_getmethods__["nw"] = _amici.Model_nw_get
    if _newclass:
        nw = _swig_property(_amici.Model_nw_get)
    __swig_getmethods__["ndwdx"] = _amici.Model_ndwdx_get
    if _newclass:
        ndwdx = _swig_property(_amici.Model_ndwdx_get)
    __swig_getmethods__["ndwdp"] = _amici.Model_ndwdp_get
    if _newclass:
        ndwdp = _swig_property(_amici.Model_ndwdp_get)
    __swig_getmethods__["nnz"] = _amici.Model_nnz_get
    if _newclass:
        nnz = _swig_property(_amici.Model_nnz_get)
    __swig_getmethods__["nJ"] = _amici.Model_nJ_get
    if _newclass:
        nJ = _swig_property(_amici.Model_nJ_get)
    __swig_getmethods__["ubw"] = _amici.Model_ubw_get
    if _newclass:
        ubw = _swig_property(_amici.Model_ubw_get)
    __swig_getmethods__["lbw"] = _amici.Model_lbw_get
    if _newclass:
        lbw = _swig_property(_amici.Model_lbw_get)
    __swig_getmethods__["o2mode"] = _amici.Model_o2mode_get
    if _newclass:
        o2mode = _swig_property(_amici.Model_o2mode_get)
    __swig_getmethods__["z2event"] = _amici.Model_z2event_get
    if _newclass:
        z2event = _swig_property(_amici.Model_z2event_get)
    __swig_getmethods__["idlist"] = _amici.Model_idlist_get
    if _newclass:
        idlist = _swig_property(_amici.Model_idlist_get)
    __swig_setmethods__["sigmay"] = _amici.Model_sigmay_set
    __swig_getmethods__["sigmay"] = _amici.Model_sigmay_get
    if _newclass:
        sigmay = _swig_property(_amici.Model_sigmay_get, _amici.Model_sigmay_set)
    __swig_setmethods__["dsigmaydp"] = _amici.Model_dsigmaydp_set
    __swig_getmethods__["dsigmaydp"] = _amici.Model_dsigmaydp_get
    if _newclass:
        dsigmaydp = _swig_property(_amici.Model_dsigmaydp_get, _amici.Model_dsigmaydp_set)
    __swig_setmethods__["sigmaz"] = _amici.Model_sigmaz_set
    __swig_getmethods__["sigmaz"] = _amici.Model_sigmaz_get
    if _newclass:
        sigmaz = _swig_property(_amici.Model_sigmaz_get, _amici.Model_sigmaz_set)
    __swig_setmethods__["dsigmazdp"] = _amici.Model_dsigmazdp_set
    __swig_getmethods__["dsigmazdp"] = _amici.Model_dsigmazdp_get
    if _newclass:
        dsigmazdp = _swig_property(_amici.Model_dsigmazdp_get, _amici.Model_dsigmazdp_set)
    __swig_setmethods__["dJydp"] = _amici.Model_dJydp_set
    __swig_getmethods__["dJydp"] = _amici.Model_dJydp_get
    if _newclass:
        dJydp = _swig_property(_amici.Model_dJydp_get, _amici.Model_dJydp_set)
    __swig_setmethods__["dJzdp"] = _amici.Model_dJzdp_set
    __swig_getmethods__["dJzdp"] = _amici.Model_dJzdp_get
    if _newclass:
        dJzdp = _swig_property(_amici.Model_dJzdp_get, _amici.Model_dJzdp_set)
    __swig_setmethods__["deltax"] = _amici.Model_deltax_set
    __swig_getmethods__["deltax"] = _amici.Model_deltax_get
    if _newclass:
        deltax = _swig_property(_amici.Model_deltax_get, _amici.Model_deltax_set)
    __swig_setmethods__["deltasx"] = _amici.Model_deltasx_set
    __swig_getmethods__["deltasx"] = _amici.Model_deltasx_get
    if _newclass:
        deltasx = _swig_property(_amici.Model_deltasx_get, _amici.Model_deltasx_set)
    __swig_setmethods__["deltaxB"] = _amici.Model_deltaxB_set
    __swig_getmethods__["deltaxB"] = _amici.Model_deltaxB_get
    if _newclass:
        deltaxB = _swig_property(_amici.Model_deltaxB_get, _amici.Model_deltaxB_set)
    __swig_setmethods__["deltaqB"] = _amici.Model_deltaqB_set
    __swig_getmethods__["deltaqB"] = _amici.Model_deltaqB_get
    if _newclass:
        deltaqB = _swig_property(_amici.Model_deltaqB_get, _amici.Model_deltaqB_set)
    __swig_setmethods__["dxdotdp"] = _amici.Model_dxdotdp_set
    __swig_getmethods__["dxdotdp"] = _amici.Model_dxdotdp_get
    if _newclass:
        dxdotdp = _swig_property(_amici.Model_dxdotdp_get, _amici.Model_dxdotdp_set)
Model_swigregister = _amici.Model_swigregister
Model_swigregister(Model)

def equals(*args):
    return _amici.equals(*args)
equals = _amici.equals


def __eq__(*args):
    return _amici.__eq__(*args)
__eq__ = _amici.__eq__
class Model_ODE(Model):
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model_ODE, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model_ODE, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def fJ(self, *args):
        return _amici.Model_ODE_fJ(self, *args)

    def fJB(self, t, x, xB, xBdot, JB):
        return _amici.Model_ODE_fJB(self, t, x, xB, xBdot, JB)

    def fJSparse(self, *args):
        return _amici.Model_ODE_fJSparse(self, *args)

    def fJSparseB(self, t, x, xB, xBdot, JB):
        return _amici.Model_ODE_fJSparseB(self, t, x, xB, xBdot, JB)

    def fJDiag(self, *args):
        return _amici.Model_ODE_fJDiag(self, *args)

    def fJv(self, *args):
        return _amici.Model_ODE_fJv(self, *args)

    def fJvB(self, vB, JvB, t, x, xB):
        return _amici.Model_ODE_fJvB(self, vB, JvB, t, x, xB)

    def froot(self, *args):
        return _amici.Model_ODE_froot(self, *args)

    def fxdot(self, *args):
        return _amici.Model_ODE_fxdot(self, *args)

    def fxBdot(self, t, x, xB, xBdot):
        return _amici.Model_ODE_fxBdot(self, t, x, xB, xBdot)

    def fqBdot(self, t, x, xB, qBdot):
        return _amici.Model_ODE_fqBdot(self, t, x, xB, qBdot)

    def fdxdotdp(self, *args):
        return _amici.Model_ODE_fdxdotdp(self, *args)

    def fsxdot(self, t, x, ip, sx, sxdot):
        return _amici.Model_ODE_fsxdot(self, t, x, ip, sx, sxdot)

    def getSolver(self):
        return _amici.Model_ODE_getSolver(self)
    __swig_destroy__ = _amici.delete_Model_ODE
    __del__ = lambda self: None
Model_ODE_swigregister = _amici.Model_ODE_swigregister
Model_ODE_swigregister(Model_ODE)

class Model_DAE(Model):
    __swig_setmethods__ = {}
    for _s in [Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model_DAE, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model_DAE, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def fJ(self, *args):
        return _amici.Model_DAE_fJ(self, *args)

    def fJB(self, t, cj, x, dx, xB, dxB, JB):
        return _amici.Model_DAE_fJB(self, t, cj, x, dx, xB, dxB, JB)

    def fJSparse(self, *args):
        return _amici.Model_DAE_fJSparse(self, *args)

    def fJSparseB(self, t, cj, x, dx, xB, dxB, JB):
        return _amici.Model_DAE_fJSparseB(self, t, cj, x, dx, xB, dxB, JB)

    def fJDiag(self, t, JDiag, cj, x, dx):
        return _amici.Model_DAE_fJDiag(self, t, JDiag, cj, x, dx)

    def fJv(self, *args):
        return _amici.Model_DAE_fJv(self, *args)

    def fJvB(self, t, x, dx, xB, dxB, vB, JvB, cj):
        return _amici.Model_DAE_fJvB(self, t, x, dx, xB, dxB, vB, JvB, cj)

    def froot(self, *args):
        return _amici.Model_DAE_froot(self, *args)

    def fxdot(self, *args):
        return _amici.Model_DAE_fxdot(self, *args)

    def fxBdot(self, t, x, dx, xB, dxB, xBdot):
        return _amici.Model_DAE_fxBdot(self, t, x, dx, xB, dxB, xBdot)

    def fqBdot(self, t, x, dx, xB, dxB, qBdot):
        return _amici.Model_DAE_fqBdot(self, t, x, dx, xB, dxB, qBdot)

    def fdxdotdp(self, *args):
        return _amici.Model_DAE_fdxdotdp(self, *args)

    def fsxdot(self, t, x, dx, ip, sx, sdx, sxdot):
        return _amici.Model_DAE_fsxdot(self, t, x, dx, ip, sx, sdx, sxdot)

    def fM(self, t, x):
        return _amici.Model_DAE_fM(self, t, x)

    def getSolver(self):
        return _amici.Model_DAE_getSolver(self)
    __swig_destroy__ = _amici.delete_Model_DAE
    __del__ = lambda self: None
Model_DAE_swigregister = _amici.Model_DAE_swigregister
Model_DAE_swigregister(Model_DAE)


def createOrOpenForWriting(hdf5filename):
    return _amici.createOrOpenForWriting(hdf5filename)
createOrOpenForWriting = _amici.createOrOpenForWriting

def readSolverSettingsFromHDF5(*args):
    return _amici.readSolverSettingsFromHDF5(*args)
readSolverSettingsFromHDF5 = _amici.readSolverSettingsFromHDF5

def readModelDataFromHDF5(*args):
    return _amici.readModelDataFromHDF5(*args)
readModelDataFromHDF5 = _amici.readModelDataFromHDF5

def writeReturnData(*args):
    return _amici.writeReturnData(*args)
writeReturnData = _amici.writeReturnData

def writeReturnDataDiagnosis(rdata, file, hdf5Location):
    return _amici.writeReturnDataDiagnosis(rdata, file, hdf5Location)
writeReturnDataDiagnosis = _amici.writeReturnDataDiagnosis

def createGroup(file, groupPath, recursively=True):
    return _amici.createGroup(file, groupPath, recursively)
createGroup = _amici.createGroup

def readSimulationExpData(hdf5Filename, hdf5Root, model):
    return _amici.readSimulationExpData(hdf5Filename, hdf5Root, model)
readSimulationExpData = _amici.readSimulationExpData

def writeSimulationExpData(edata, file, hdf5Location):
    return _amici.writeSimulationExpData(edata, file, hdf5Location)
writeSimulationExpData = _amici.writeSimulationExpData

def attributeExists(*args):
    return _amici.attributeExists(*args)
attributeExists = _amici.attributeExists

def createAndWriteInt1DDataset(*args):
    return _amici.createAndWriteInt1DDataset(*args)
createAndWriteInt1DDataset = _amici.createAndWriteInt1DDataset

def createAndWriteInt2DDataset(file, datasetName, buffer, m, n):
    return _amici.createAndWriteInt2DDataset(file, datasetName, buffer, m, n)
createAndWriteInt2DDataset = _amici.createAndWriteInt2DDataset

def createAndWriteDouble1DDataset(file, datasetName, buffer, m):
    return _amici.createAndWriteDouble1DDataset(file, datasetName, buffer, m)
createAndWriteDouble1DDataset = _amici.createAndWriteDouble1DDataset

def createAndWriteDouble2DDataset(file, datasetName, buffer, m, n):
    return _amici.createAndWriteDouble2DDataset(file, datasetName, buffer, m, n)
createAndWriteDouble2DDataset = _amici.createAndWriteDouble2DDataset

def createAndWriteDouble3DDataset(file, datasetName, buffer, m, n, o):
    return _amici.createAndWriteDouble3DDataset(file, datasetName, buffer, m, n, o)
createAndWriteDouble3DDataset = _amici.createAndWriteDouble3DDataset

def getDoubleScalarAttribute(file, optionsObject, attributeName):
    return _amici.getDoubleScalarAttribute(file, optionsObject, attributeName)
getDoubleScalarAttribute = _amici.getDoubleScalarAttribute

def getIntScalarAttribute(file, optionsObject, attributeName):
    return _amici.getIntScalarAttribute(file, optionsObject, attributeName)
getIntScalarAttribute = _amici.getIntScalarAttribute

def getIntDataset1D(file, name):
    return _amici.getIntDataset1D(file, name)
getIntDataset1D = _amici.getIntDataset1D

def getDoubleDataset1D(file, name):
    return _amici.getDoubleDataset1D(file, name)
getDoubleDataset1D = _amici.getDoubleDataset1D

def getDoubleDataset2D(file, name, m, n):
    return _amici.getDoubleDataset2D(file, name, m, n)
getDoubleDataset2D = _amici.getDoubleDataset2D

def getDoubleDataset3D(file, name, m, n, o):
    return _amici.getDoubleDataset3D(file, name, m, n, o)
getDoubleDataset3D = _amici.getDoubleDataset3D

def locationExists(*args):
    return _amici.locationExists(*args)
locationExists = _amici.locationExists

def printErrMsgIdAndTxt(identifier, format):
    return _amici.printErrMsgIdAndTxt(identifier, format)
printErrMsgIdAndTxt = _amici.printErrMsgIdAndTxt

def printWarnMsgIdAndTxt(identifier, format):
    return _amici.printWarnMsgIdAndTxt(identifier, format)
printWarnMsgIdAndTxt = _amici.printWarnMsgIdAndTxt

def runAmiciSimulation(solver, edata, model):
    return _amici.runAmiciSimulation(solver, edata, model)
runAmiciSimulation = _amici.runAmiciSimulation

def amici_dgemv(layout, TransA, M, N, alpha, A, lda, X, incX, beta, Y, incY):
    return _amici.amici_dgemv(layout, TransA, M, N, alpha, A, lda, X, incX, beta, Y, incY)
amici_dgemv = _amici.amici_dgemv

def amici_dgemm(layout, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc):
    return _amici.amici_dgemm(layout, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc)
amici_dgemm = _amici.amici_dgemm
class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _amici.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amici.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _amici.DoubleVector___bool__(self)

    def __len__(self):
        return _amici.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _amici.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amici.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amici.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amici.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amici.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amici.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _amici.DoubleVector_pop(self)

    def append(self, x):
        return _amici.DoubleVector_append(self, x)

    def empty(self):
        return _amici.DoubleVector_empty(self)

    def size(self):
        return _amici.DoubleVector_size(self)

    def swap(self, v):
        return _amici.DoubleVector_swap(self, v)

    def begin(self):
        return _amici.DoubleVector_begin(self)

    def end(self):
        return _amici.DoubleVector_end(self)

    def rbegin(self):
        return _amici.DoubleVector_rbegin(self)

    def rend(self):
        return _amici.DoubleVector_rend(self)

    def clear(self):
        return _amici.DoubleVector_clear(self)

    def get_allocator(self):
        return _amici.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _amici.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _amici.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _amici.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _amici.DoubleVector_push_back(self, x)

    def front(self):
        return _amici.DoubleVector_front(self)

    def back(self):
        return _amici.DoubleVector_back(self)

    def assign(self, n, x):
        return _amici.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _amici.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _amici.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _amici.DoubleVector_reserve(self, n)

    def capacity(self):
        return _amici.DoubleVector_capacity(self)
    __swig_destroy__ = _amici.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _amici.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _amici.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amici.IntVector___nonzero__(self)

    def __bool__(self):
        return _amici.IntVector___bool__(self)

    def __len__(self):
        return _amici.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _amici.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amici.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amici.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amici.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amici.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amici.IntVector___setitem__(self, *args)

    def pop(self):
        return _amici.IntVector_pop(self)

    def append(self, x):
        return _amici.IntVector_append(self, x)

    def empty(self):
        return _amici.IntVector_empty(self)

    def size(self):
        return _amici.IntVector_size(self)

    def swap(self, v):
        return _amici.IntVector_swap(self, v)

    def begin(self):
        return _amici.IntVector_begin(self)

    def end(self):
        return _amici.IntVector_end(self)

    def rbegin(self):
        return _amici.IntVector_rbegin(self)

    def rend(self):
        return _amici.IntVector_rend(self)

    def clear(self):
        return _amici.IntVector_clear(self)

    def get_allocator(self):
        return _amici.IntVector_get_allocator(self)

    def pop_back(self):
        return _amici.IntVector_pop_back(self)

    def erase(self, *args):
        return _amici.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _amici.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _amici.IntVector_push_back(self, x)

    def front(self):
        return _amici.IntVector_front(self)

    def back(self):
        return _amici.IntVector_back(self)

    def assign(self, n, x):
        return _amici.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _amici.IntVector_resize(self, *args)

    def insert(self, *args):
        return _amici.IntVector_insert(self, *args)

    def reserve(self, n):
        return _amici.IntVector_reserve(self, n)

    def capacity(self):
        return _amici.IntVector_capacity(self)
    __swig_destroy__ = _amici.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _amici.IntVector_swigregister
IntVector_swigregister(IntVector)

class ParameterScalingVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterScalingVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterScalingVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _amici.ParameterScalingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amici.ParameterScalingVector___nonzero__(self)

    def __bool__(self):
        return _amici.ParameterScalingVector___bool__(self)

    def __len__(self):
        return _amici.ParameterScalingVector___len__(self)

    def __getslice__(self, i, j):
        return _amici.ParameterScalingVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amici.ParameterScalingVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amici.ParameterScalingVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amici.ParameterScalingVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amici.ParameterScalingVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amici.ParameterScalingVector___setitem__(self, *args)

    def pop(self):
        return _amici.ParameterScalingVector_pop(self)

    def append(self, x):
        return _amici.ParameterScalingVector_append(self, x)

    def empty(self):
        return _amici.ParameterScalingVector_empty(self)

    def size(self):
        return _amici.ParameterScalingVector_size(self)

    def swap(self, v):
        return _amici.ParameterScalingVector_swap(self, v)

    def begin(self):
        return _amici.ParameterScalingVector_begin(self)

    def end(self):
        return _amici.ParameterScalingVector_end(self)

    def rbegin(self):
        return _amici.ParameterScalingVector_rbegin(self)

    def rend(self):
        return _amici.ParameterScalingVector_rend(self)

    def clear(self):
        return _amici.ParameterScalingVector_clear(self)

    def get_allocator(self):
        return _amici.ParameterScalingVector_get_allocator(self)

    def pop_back(self):
        return _amici.ParameterScalingVector_pop_back(self)

    def erase(self, *args):
        return _amici.ParameterScalingVector_erase(self, *args)

    def __init__(self, *args):
        this = _amici.new_ParameterScalingVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _amici.ParameterScalingVector_push_back(self, x)

    def front(self):
        return _amici.ParameterScalingVector_front(self)

    def back(self):
        return _amici.ParameterScalingVector_back(self)

    def assign(self, n, x):
        return _amici.ParameterScalingVector_assign(self, n, x)

    def resize(self, *args):
        return _amici.ParameterScalingVector_resize(self, *args)

    def insert(self, *args):
        return _amici.ParameterScalingVector_insert(self, *args)

    def reserve(self, n):
        return _amici.ParameterScalingVector_reserve(self, n)

    def capacity(self):
        return _amici.ParameterScalingVector_capacity(self)
    __swig_destroy__ = _amici.delete_ParameterScalingVector
    __del__ = lambda self: None
ParameterScalingVector_swigregister = _amici.ParameterScalingVector_swigregister
ParameterScalingVector_swigregister(ParameterScalingVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _amici.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _amici.StringVector___nonzero__(self)

    def __bool__(self):
        return _amici.StringVector___bool__(self)

    def __len__(self):
        return _amici.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _amici.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _amici.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _amici.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _amici.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _amici.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _amici.StringVector___setitem__(self, *args)

    def pop(self):
        return _amici.StringVector_pop(self)

    def append(self, x):
        return _amici.StringVector_append(self, x)

    def empty(self):
        return _amici.StringVector_empty(self)

    def size(self):
        return _amici.StringVector_size(self)

    def swap(self, v):
        return _amici.StringVector_swap(self, v)

    def begin(self):
        return _amici.StringVector_begin(self)

    def end(self):
        return _amici.StringVector_end(self)

    def rbegin(self):
        return _amici.StringVector_rbegin(self)

    def rend(self):
        return _amici.StringVector_rend(self)

    def clear(self):
        return _amici.StringVector_clear(self)

    def get_allocator(self):
        return _amici.StringVector_get_allocator(self)

    def pop_back(self):
        return _amici.StringVector_pop_back(self)

    def erase(self, *args):
        return _amici.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _amici.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _amici.StringVector_push_back(self, x)

    def front(self):
        return _amici.StringVector_front(self)

    def back(self):
        return _amici.StringVector_back(self)

    def assign(self, n, x):
        return _amici.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _amici.StringVector_resize(self, *args)

    def insert(self, *args):
        return _amici.StringVector_insert(self, *args)

    def reserve(self, n):
        return _amici.StringVector_reserve(self, n)

    def capacity(self):
        return _amici.StringVector_capacity(self)
    __swig_destroy__ = _amici.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _amici.StringVector_swigregister
StringVector_swigregister(StringVector)

# This file is compatible with both classic and new-style classes.


