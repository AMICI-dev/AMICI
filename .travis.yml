language: generic
sudo: required
branches:
  only:
  - master
  - develop
matrix:
  fast_finish: true
  include:
        
  - os: linux
    before_install:
    - sudo apt-get install libhdf5-serial-dev zlib1g-dev libatlas-base-dev valgrind
      lcov cppcheck  libboost-serialization-dev twine
    - sudo add-apt-repository -y 'deb http://us.archive.ubuntu.com/ubuntu/ xenial
      main universe restricted'
    - sudo add-apt-repository -y 'deb http://gb.archive.ubuntu.com/ubuntu/ xenial-updates
      main restricted'
    - sudo apt-get update -q
    - sudo apt-get install swig3.0 g++-4.9
    - export CC="gcc-4.9" CXX="g++-4.9"
    - mkdir -p ~/bin/ && ln -s /usr/bin/swig3.0 ~/bin/swig && export PATH=~/bin/:$PATH
    - pyenv shell 2.7 3.6
    compiler: gcc
    env: ENABLE_GCOV_COVERAGE=TRUE
    after_script:
    - bash <(curl -s https://codecov.io/bash) -f coverage.info -X fix -F cpp
    - bash <(curl -s https://codecov.io/bash) -f coverage_py.xml -F python
    before_deploy:
      - cd $BASE_DIR
    deploy:
      skip_cleanup: true
      provider: script
      script: scripts/deployPyPi.sh
      on:
        branch: master
        tags: true
  - os: osx
    osx_image: xcode9.3
    compiler: clang
    before_install:
    - brew update
    - travis_wait brew install gcc || brew link --overwrite gcc
    - travis_wait brew install hdf5 cppcheck swig doxygen ragel graphviz homebrew/cask/mactex
    - brew upgrade python
    - export PATH=/Users/travis/Library/Python/3.7/bin:/Library/TeX/texbin:$PATH
    after_success:
    - cd $BASE_DIR/python/sdist
    deploy:
      provider: pages
      local-dir: doc
      skip-cleanup: true
      github-token: "$GITHUB_TOKEN"
      keep-history: false
      verbose: true
      on:
        branch: master
install:
- export BASE_DIR=`pwd`
- pip3 install --user --upgrade pip==9.0.3 setuptools wheel pkgconfig doxypypy scipy
- "./scripts/buildSuiteSparse.sh"
- "./scripts/buildSundials.sh"
- "./scripts/buildCpputest.sh"
- "./scripts/buildBNGL.sh"
- export BNGPATH=$(pwd)/ThirdParty/BioNetGen-2.3.2
- "./scripts/buildAmici.sh"
- "./scripts/installAmiciArchive.sh"
- "./scripts/installAmiciSource.sh"
script:
- cd $BASE_DIR
- "./scripts/run-cpputest.sh"
- "./scripts/run-cppcheck.sh"
- cd $BASE_DIR/build
- make python-tests
- cd $BASE_DIR
- scripts/runNotebook.sh python/examples/example_*/
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then ./scripts/run-valgrind.sh; fi
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then ./scripts/run-doxygen.sh; fi
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then ./scripts/run-codecov.sh; fi
- if [[ "$TRAVIS_OS_NAME" == "linux" ]] && [[ "$TRAVIS_EVENT_TYPE" == "cron" ]]; then
  ./scripts/run-SBMLTestsuite.sh; fi
after_failure:
- echo -en 'travis_fold:start:failure\\r'
- ls -alR
- echo -en 'travis_fold:end:failure\\r'
cache:
- pip

    