
#include <include/symbolic_functions.h>
#include <string.h>
#include <include/udata.h>
#include <include/udata_accessors.h>
#include "model_jakstat_adjoint_o2_w.h"

int JvB_model_jakstat_adjoint_o2(N_Vector vB, N_Vector JvB, realtype t, N_Vector x, N_Vector xB, N_Vector xBdot, void *user_data, N_Vector tmpB) {
int status = 0;
UserData *udata = (UserData*) user_data;
realtype *x_tmp = N_VGetArrayPointer(x);
realtype *xB_tmp = N_VGetArrayPointer(xB);
realtype *xBdot_tmp = N_VGetArrayPointer(xBdot);
realtype *vB_tmp = N_VGetArrayPointer(vB);
realtype *JvB_tmp = N_VGetArrayPointer(JvB);
memset(JvB_tmp,0,sizeof(realtype)*162);
status = w_model_jakstat_adjoint_o2(t,x,NULL,user_data);
  JvB_tmp[0] = -p[0]*vB_tmp[1]*w_tmp[0]+k[0]*p[0]*vB_tmp[0]*w_tmp[0]*w_tmp[2];
  JvB_tmp[1] = dwdx_tmp[0]*p[1]*vB_tmp[1]*2.0-dwdx_tmp[0]*p[1]*vB_tmp[2];
  JvB_tmp[2] = p[2]*vB_tmp[2]-k[0]*p[2]*vB_tmp[3]*w_tmp[3];
  JvB_tmp[3] = -dwdx_tmp[1]*p[3]*vB_tmp[4]+k[1]*p[3]*vB_tmp[3]*w_tmp[3];
  JvB_tmp[4] = p[3]*vB_tmp[4]-p[3]*vB_tmp[5];
  JvB_tmp[5] = p[3]*vB_tmp[5]-p[3]*vB_tmp[6];
  JvB_tmp[6] = p[3]*vB_tmp[6]-p[3]*vB_tmp[7];
  JvB_tmp[7] = p[3]*vB_tmp[7]-p[3]*vB_tmp[8];
  JvB_tmp[8] = p[3]*vB_tmp[8]-k[1]*p[3]*vB_tmp[0]*w_tmp[2];
  JvB_tmp[9] = vB_tmp[0]*w_tmp[0]-vB_tmp[1]*w_tmp[0]+p[0]*vB_tmp[9]*w_tmp[0]-p[0]*vB_tmp[10]*w_tmp[0];
  JvB_tmp[10] = p[1]*vB_tmp[1]*x_tmp[10]*4.0+p[1]*vB_tmp[10]*x_tmp[1]*4.0-p[1]*vB_tmp[2]*x_tmp[10]*2.0-p[1]*vB_tmp[11]*x_tmp[1]*2.0;
  JvB_tmp[11] = p[2]*vB_tmp[11]-k[0]*p[2]*vB_tmp[12]*w_tmp[3];
  JvB_tmp[12] = p[3]*vB_tmp[12]-p[3]*vB_tmp[13]*2.0;
  JvB_tmp[13] = p[3]*vB_tmp[13]-p[3]*vB_tmp[14];
  JvB_tmp[14] = p[3]*vB_tmp[14]-p[3]*vB_tmp[15];
  JvB_tmp[15] = p[3]*vB_tmp[15]-p[3]*vB_tmp[16];
  JvB_tmp[16] = p[3]*vB_tmp[16]-p[3]*vB_tmp[17];
  JvB_tmp[17] = p[3]*vB_tmp[17]-k[1]*p[3]*vB_tmp[9]*w_tmp[2];
  JvB_tmp[18] = p[0]*vB_tmp[18]*w_tmp[0]-p[0]*vB_tmp[19]*w_tmp[0];
  JvB_tmp[19] = vB_tmp[1]*(dwdx_tmp[0]*2.0+p[1]*x_tmp[19]*4.0)-vB_tmp[2]*(dwdx_tmp[0]+p[1]*x_tmp[19]*2.0)+p[1]*vB_tmp[19]*x_tmp[1]*4.0-p[1]*vB_tmp[20]*x_tmp[1]*2.0;
  JvB_tmp[20] = p[2]*vB_tmp[20]-k[0]*p[2]*vB_tmp[21]*w_tmp[3];
  JvB_tmp[21] = p[3]*vB_tmp[21]-p[3]*vB_tmp[22]*2.0;
  JvB_tmp[22] = p[3]*vB_tmp[22]-p[3]*vB_tmp[23];
  JvB_tmp[23] = p[3]*vB_tmp[23]-p[3]*vB_tmp[24];
  JvB_tmp[24] = p[3]*vB_tmp[24]-p[3]*vB_tmp[25];
  JvB_tmp[25] = p[3]*vB_tmp[25]-p[3]*vB_tmp[26];
  JvB_tmp[26] = p[3]*vB_tmp[26]-k[1]*p[3]*vB_tmp[18]*w_tmp[2];
  JvB_tmp[27] = p[0]*vB_tmp[27]*w_tmp[0]-p[0]*vB_tmp[28]*w_tmp[0];
  JvB_tmp[28] = p[1]*vB_tmp[1]*x_tmp[28]*4.0+p[1]*vB_tmp[28]*x_tmp[1]*4.0-p[1]*vB_tmp[2]*x_tmp[28]*2.0-p[1]*vB_tmp[29]*x_tmp[1]*2.0;
  JvB_tmp[29] = vB_tmp[2]+p[2]*vB_tmp[29]-k[0]*vB_tmp[3]*w_tmp[3]-k[0]*p[2]*vB_tmp[30]*w_tmp[3];
  JvB_tmp[30] = p[3]*vB_tmp[30]-p[3]*vB_tmp[31]*2.0;
  JvB_tmp[31] = p[3]*vB_tmp[31]-p[3]*vB_tmp[32];
  JvB_tmp[32] = p[3]*vB_tmp[32]-p[3]*vB_tmp[33];
  JvB_tmp[33] = p[3]*vB_tmp[33]-p[3]*vB_tmp[34];
  JvB_tmp[34] = p[3]*vB_tmp[34]-p[3]*vB_tmp[35];
  JvB_tmp[35] = p[3]*vB_tmp[35]-k[1]*p[3]*vB_tmp[27]*w_tmp[2];
  JvB_tmp[36] = p[0]*vB_tmp[36]*w_tmp[0]-p[0]*vB_tmp[37]*w_tmp[0];
  JvB_tmp[37] = p[1]*vB_tmp[1]*x_tmp[37]*4.0+p[1]*vB_tmp[37]*x_tmp[1]*4.0-p[1]*vB_tmp[2]*x_tmp[37]*2.0-p[1]*vB_tmp[38]*x_tmp[1]*2.0;
  JvB_tmp[38] = p[2]*vB_tmp[38]-k[0]*p[2]*vB_tmp[39]*w_tmp[3];
  JvB_tmp[39] = vB_tmp[3]-dwdx_tmp[1]*vB_tmp[4]+p[3]*vB_tmp[39]-p[3]*vB_tmp[40]*2.0;
  JvB_tmp[40] = vB_tmp[4]-vB_tmp[5]+p[3]*vB_tmp[40]-p[3]*vB_tmp[41];
  JvB_tmp[41] = vB_tmp[5]-vB_tmp[6]+p[3]*vB_tmp[41]-p[3]*vB_tmp[42];
  JvB_tmp[42] = vB_tmp[6]-vB_tmp[7]+p[3]*vB_tmp[42]-p[3]*vB_tmp[43];
  JvB_tmp[43] = vB_tmp[7]-vB_tmp[8]+p[3]*vB_tmp[43]-p[3]*vB_tmp[44];
  JvB_tmp[44] = vB_tmp[8]+p[3]*vB_tmp[44]-k[1]*vB_tmp[0]*w_tmp[2]-k[1]*p[3]*vB_tmp[36]*w_tmp[2];
  JvB_tmp[45] = p[0]*vB_tmp[45]*w_tmp[0]-p[0]*vB_tmp[46]*w_tmp[0];
  JvB_tmp[46] = p[1]*vB_tmp[1]*x_tmp[46]*4.0+p[1]*vB_tmp[46]*x_tmp[1]*4.0-p[1]*vB_tmp[2]*x_tmp[46]*2.0-p[1]*vB_tmp[47]*x_tmp[1]*2.0;
  JvB_tmp[47] = p[2]*vB_tmp[47]-k[0]*p[2]*vB_tmp[48]*w_tmp[3];
  JvB_tmp[48] = p[3]*vB_tmp[48]-p[3]*vB_tmp[49]*2.0;
  JvB_tmp[49] = p[3]*vB_tmp[49]-p[3]*vB_tmp[50];
  JvB_tmp[50] = p[3]*vB_tmp[50]-p[3]*vB_tmp[51];
  JvB_tmp[51] = p[3]*vB_tmp[51]-p[3]*vB_tmp[52];
  JvB_tmp[52] = p[3]*vB_tmp[52]-p[3]*vB_tmp[53];
  JvB_tmp[53] = p[3]*vB_tmp[53]-k[1]*p[3]*vB_tmp[45]*w_tmp[2];
  JvB_tmp[54] = p[0]*vB_tmp[0]*w_tmp[5]-p[0]*vB_tmp[1]*w_tmp[5]+p[0]*vB_tmp[54]*w_tmp[0]-p[0]*vB_tmp[55]*w_tmp[0];
  JvB_tmp[55] = p[1]*vB_tmp[1]*x_tmp[55]*4.0+p[1]*vB_tmp[55]*x_tmp[1]*4.0-p[1]*vB_tmp[2]*x_tmp[55]*2.0-p[1]*vB_tmp[56]*x_tmp[1]*2.0;
  JvB_tmp[56] = p[2]*vB_tmp[56]-k[0]*p[2]*vB_tmp[57]*w_tmp[3];
  JvB_tmp[57] = p[3]*vB_tmp[57]-p[3]*vB_tmp[58]*2.0;
  JvB_tmp[58] = p[3]*vB_tmp[58]-p[3]*vB_tmp[59];
  JvB_tmp[59] = p[3]*vB_tmp[59]-p[3]*vB_tmp[60];
  JvB_tmp[60] = p[3]*vB_tmp[60]-p[3]*vB_tmp[61];
  JvB_tmp[61] = p[3]*vB_tmp[61]-p[3]*vB_tmp[62];
  JvB_tmp[62] = p[3]*vB_tmp[62]-k[1]*p[3]*vB_tmp[54]*w_tmp[2];
  JvB_tmp[63] = p[0]*vB_tmp[0]*w_tmp[6]-p[0]*vB_tmp[1]*w_tmp[6]+p[0]*vB_tmp[63]*w_tmp[0]-p[0]*vB_tmp[64]*w_tmp[0];
  JvB_tmp[64] = p[1]*vB_tmp[1]*x_tmp[64]*4.0+p[1]*vB_tmp[64]*x_tmp[1]*4.0-p[1]*vB_tmp[2]*x_tmp[64]*2.0-p[1]*vB_tmp[65]*x_tmp[1]*2.0;
  JvB_tmp[65] = p[2]*vB_tmp[65]-k[0]*p[2]*vB_tmp[66]*w_tmp[3];
  JvB_tmp[66] = p[3]*vB_tmp[66]-p[3]*vB_tmp[67]*2.0;
  JvB_tmp[67] = p[3]*vB_tmp[67]-p[3]*vB_tmp[68];
  JvB_tmp[68] = p[3]*vB_tmp[68]-p[3]*vB_tmp[69];
  JvB_tmp[69] = p[3]*vB_tmp[69]-p[3]*vB_tmp[70];
  JvB_tmp[70] = p[3]*vB_tmp[70]-p[3]*vB_tmp[71];
  JvB_tmp[71] = p[3]*vB_tmp[71]-k[1]*p[3]*vB_tmp[63]*w_tmp[2];
  JvB_tmp[72] = p[0]*vB_tmp[0]*w_tmp[7]-p[0]*vB_tmp[1]*w_tmp[7]+p[0]*vB_tmp[72]*w_tmp[0]-p[0]*vB_tmp[73]*w_tmp[0];
  JvB_tmp[73] = p[1]*vB_tmp[1]*x_tmp[73]*4.0+p[1]*vB_tmp[73]*x_tmp[1]*4.0-p[1]*vB_tmp[2]*x_tmp[73]*2.0-p[1]*vB_tmp[74]*x_tmp[1]*2.0;
  JvB_tmp[74] = p[2]*vB_tmp[74]-k[0]*p[2]*vB_tmp[75]*w_tmp[3];
  JvB_tmp[75] = p[3]*vB_tmp[75]-p[3]*vB_tmp[76]*2.0;
  JvB_tmp[76] = p[3]*vB_tmp[76]-p[3]*vB_tmp[77];
  JvB_tmp[77] = p[3]*vB_tmp[77]-p[3]*vB_tmp[78];
  JvB_tmp[78] = p[3]*vB_tmp[78]-p[3]*vB_tmp[79];
  JvB_tmp[79] = p[3]*vB_tmp[79]-p[3]*vB_tmp[80];
  JvB_tmp[80] = p[3]*vB_tmp[80]-k[1]*p[3]*vB_tmp[72]*w_tmp[2];
  JvB_tmp[81] = p[0]*vB_tmp[0]*w_tmp[8]-p[0]*vB_tmp[1]*w_tmp[8]+p[0]*vB_tmp[81]*w_tmp[0]-p[0]*vB_tmp[82]*w_tmp[0];
  JvB_tmp[82] = p[1]*vB_tmp[1]*x_tmp[82]*4.0+p[1]*vB_tmp[82]*x_tmp[1]*4.0-p[1]*vB_tmp[2]*x_tmp[82]*2.0-p[1]*vB_tmp[83]*x_tmp[1]*2.0;
  JvB_tmp[83] = p[2]*vB_tmp[83]-k[0]*p[2]*vB_tmp[84]*w_tmp[3];
  JvB_tmp[84] = p[3]*vB_tmp[84]-p[3]*vB_tmp[85]*2.0;
  JvB_tmp[85] = p[3]*vB_tmp[85]-p[3]*vB_tmp[86];
  JvB_tmp[86] = p[3]*vB_tmp[86]-p[3]*vB_tmp[87];
  JvB_tmp[87] = p[3]*vB_tmp[87]-p[3]*vB_tmp[88];
  JvB_tmp[88] = p[3]*vB_tmp[88]-p[3]*vB_tmp[89];
  JvB_tmp[89] = p[3]*vB_tmp[89]-k[1]*p[3]*vB_tmp[81]*w_tmp[2];
  JvB_tmp[90] = p[0]*vB_tmp[0]*w_tmp[9]-p[0]*vB_tmp[1]*w_tmp[9]+p[0]*vB_tmp[90]*w_tmp[0]-p[0]*vB_tmp[91]*w_tmp[0];
  JvB_tmp[91] = p[1]*vB_tmp[1]*x_tmp[91]*4.0+p[1]*vB_tmp[91]*x_tmp[1]*4.0-p[1]*vB_tmp[2]*x_tmp[91]*2.0-p[1]*vB_tmp[92]*x_tmp[1]*2.0;
  JvB_tmp[92] = p[2]*vB_tmp[92]-k[0]*p[2]*vB_tmp[93]*w_tmp[3];
  JvB_tmp[93] = p[3]*vB_tmp[93]-p[3]*vB_tmp[94]*2.0;
  JvB_tmp[94] = p[3]*vB_tmp[94]-p[3]*vB_tmp[95];
  JvB_tmp[95] = p[3]*vB_tmp[95]-p[3]*vB_tmp[96];
  JvB_tmp[96] = p[3]*vB_tmp[96]-p[3]*vB_tmp[97];
  JvB_tmp[97] = p[3]*vB_tmp[97]-p[3]*vB_tmp[98];
  JvB_tmp[98] = p[3]*vB_tmp[98]-k[1]*p[3]*vB_tmp[90]*w_tmp[2];
  JvB_tmp[99] = p[0]*vB_tmp[99]*w_tmp[0]-p[0]*vB_tmp[100]*w_tmp[0];
  JvB_tmp[100] = p[1]*vB_tmp[1]*x_tmp[100]*4.0+p[1]*vB_tmp[100]*x_tmp[1]*4.0-p[1]*vB_tmp[2]*x_tmp[100]*2.0-p[1]*vB_tmp[101]*x_tmp[1]*2.0;
  JvB_tmp[101] = p[2]*vB_tmp[101]-k[0]*p[2]*vB_tmp[102]*w_tmp[3];
  JvB_tmp[102] = p[3]*vB_tmp[102]-p[3]*vB_tmp[103]*2.0;
  JvB_tmp[103] = p[3]*vB_tmp[103]-p[3]*vB_tmp[104];
  JvB_tmp[104] = p[3]*vB_tmp[104]-p[3]*vB_tmp[105];
  JvB_tmp[105] = p[3]*vB_tmp[105]-p[3]*vB_tmp[106];
  JvB_tmp[106] = p[3]*vB_tmp[106]-p[3]*vB_tmp[107];
  JvB_tmp[107] = p[3]*vB_tmp[107]-k[1]*p[3]*vB_tmp[99]*w_tmp[2];
  JvB_tmp[108] = p[0]*vB_tmp[108]*w_tmp[0]-p[0]*vB_tmp[109]*w_tmp[0];
  JvB_tmp[109] = p[1]*vB_tmp[1]*x_tmp[109]*4.0+p[1]*vB_tmp[109]*x_tmp[1]*4.0-p[1]*vB_tmp[2]*x_tmp[109]*2.0-p[1]*vB_tmp[110]*x_tmp[1]*2.0;
  JvB_tmp[110] = p[2]*vB_tmp[110]-k[0]*p[2]*vB_tmp[111]*w_tmp[3];
  JvB_tmp[111] = p[3]*vB_tmp[111]-p[3]*vB_tmp[112]*2.0;
  JvB_tmp[112] = p[3]*vB_tmp[112]-p[3]*vB_tmp[113];
  JvB_tmp[113] = p[3]*vB_tmp[113]-p[3]*vB_tmp[114];
  JvB_tmp[114] = p[3]*vB_tmp[114]-p[3]*vB_tmp[115];
  JvB_tmp[115] = p[3]*vB_tmp[115]-p[3]*vB_tmp[116];
  JvB_tmp[116] = p[3]*vB_tmp[116]-k[1]*p[3]*vB_tmp[108]*w_tmp[2];
  JvB_tmp[117] = p[0]*vB_tmp[117]*w_tmp[0]-p[0]*vB_tmp[118]*w_tmp[0];
  JvB_tmp[118] = p[1]*vB_tmp[1]*x_tmp[118]*4.0+p[1]*vB_tmp[118]*x_tmp[1]*4.0-p[1]*vB_tmp[2]*x_tmp[118]*2.0-p[1]*vB_tmp[119]*x_tmp[1]*2.0;
  JvB_tmp[119] = p[2]*vB_tmp[119]-k[0]*p[2]*vB_tmp[120]*w_tmp[3];
  JvB_tmp[120] = p[3]*vB_tmp[120]-p[3]*vB_tmp[121]*2.0;
  JvB_tmp[121] = p[3]*vB_tmp[121]-p[3]*vB_tmp[122];
  JvB_tmp[122] = p[3]*vB_tmp[122]-p[3]*vB_tmp[123];
  JvB_tmp[123] = p[3]*vB_tmp[123]-p[3]*vB_tmp[124];
  JvB_tmp[124] = p[3]*vB_tmp[124]-p[3]*vB_tmp[125];
  JvB_tmp[125] = p[3]*vB_tmp[125]-k[1]*p[3]*vB_tmp[117]*w_tmp[2];
  JvB_tmp[126] = p[0]*vB_tmp[126]*w_tmp[0]-p[0]*vB_tmp[127]*w_tmp[0];
  JvB_tmp[127] = p[1]*vB_tmp[1]*x_tmp[127]*4.0+p[1]*vB_tmp[127]*x_tmp[1]*4.0-p[1]*vB_tmp[2]*x_tmp[127]*2.0-p[1]*vB_tmp[128]*x_tmp[1]*2.0;
  JvB_tmp[128] = p[2]*vB_tmp[128]-k[0]*p[2]*vB_tmp[129]*w_tmp[3];
  JvB_tmp[129] = p[3]*vB_tmp[129]-p[3]*vB_tmp[130]*2.0;
  JvB_tmp[130] = p[3]*vB_tmp[130]-p[3]*vB_tmp[131];
  JvB_tmp[131] = p[3]*vB_tmp[131]-p[3]*vB_tmp[132];
  JvB_tmp[132] = p[3]*vB_tmp[132]-p[3]*vB_tmp[133];
  JvB_tmp[133] = p[3]*vB_tmp[133]-p[3]*vB_tmp[134];
  JvB_tmp[134] = p[3]*vB_tmp[134]-k[1]*p[3]*vB_tmp[126]*w_tmp[2];
  JvB_tmp[135] = p[0]*vB_tmp[135]*w_tmp[0]-p[0]*vB_tmp[136]*w_tmp[0];
  JvB_tmp[136] = p[1]*vB_tmp[1]*x_tmp[136]*4.0+p[1]*vB_tmp[136]*x_tmp[1]*4.0-p[1]*vB_tmp[2]*x_tmp[136]*2.0-p[1]*vB_tmp[137]*x_tmp[1]*2.0;
  JvB_tmp[137] = p[2]*vB_tmp[137]-k[0]*p[2]*vB_tmp[138]*w_tmp[3];
  JvB_tmp[138] = p[3]*vB_tmp[138]-p[3]*vB_tmp[139]*2.0;
  JvB_tmp[139] = p[3]*vB_tmp[139]-p[3]*vB_tmp[140];
  JvB_tmp[140] = p[3]*vB_tmp[140]-p[3]*vB_tmp[141];
  JvB_tmp[141] = p[3]*vB_tmp[141]-p[3]*vB_tmp[142];
  JvB_tmp[142] = p[3]*vB_tmp[142]-p[3]*vB_tmp[143];
  JvB_tmp[143] = p[3]*vB_tmp[143]-k[1]*p[3]*vB_tmp[135]*w_tmp[2];
  JvB_tmp[144] = p[0]*vB_tmp[144]*w_tmp[0]-p[0]*vB_tmp[145]*w_tmp[0];
  JvB_tmp[145] = p[1]*vB_tmp[1]*x_tmp[145]*4.0+p[1]*vB_tmp[145]*x_tmp[1]*4.0-p[1]*vB_tmp[2]*x_tmp[145]*2.0-p[1]*vB_tmp[146]*x_tmp[1]*2.0;
  JvB_tmp[146] = p[2]*vB_tmp[146]-k[0]*p[2]*vB_tmp[147]*w_tmp[3];
  JvB_tmp[147] = p[3]*vB_tmp[147]-p[3]*vB_tmp[148]*2.0;
  JvB_tmp[148] = p[3]*vB_tmp[148]-p[3]*vB_tmp[149];
  JvB_tmp[149] = p[3]*vB_tmp[149]-p[3]*vB_tmp[150];
  JvB_tmp[150] = p[3]*vB_tmp[150]-p[3]*vB_tmp[151];
  JvB_tmp[151] = p[3]*vB_tmp[151]-p[3]*vB_tmp[152];
  JvB_tmp[152] = p[3]*vB_tmp[152]-k[1]*p[3]*vB_tmp[144]*w_tmp[2];
  JvB_tmp[153] = p[0]*vB_tmp[153]*w_tmp[0]-p[0]*vB_tmp[154]*w_tmp[0];
  JvB_tmp[154] = p[1]*vB_tmp[1]*x_tmp[154]*4.0+p[1]*vB_tmp[154]*x_tmp[1]*4.0-p[1]*vB_tmp[2]*x_tmp[154]*2.0-p[1]*vB_tmp[155]*x_tmp[1]*2.0;
  JvB_tmp[155] = p[2]*vB_tmp[155]-k[0]*p[2]*vB_tmp[156]*w_tmp[3];
  JvB_tmp[156] = p[3]*vB_tmp[156]-p[3]*vB_tmp[157]*2.0;
  JvB_tmp[157] = p[3]*vB_tmp[157]-p[3]*vB_tmp[158];
  JvB_tmp[158] = p[3]*vB_tmp[158]-p[3]*vB_tmp[159];
  JvB_tmp[159] = p[3]*vB_tmp[159]-p[3]*vB_tmp[160];
  JvB_tmp[160] = p[3]*vB_tmp[160]-p[3]*vB_tmp[161];
  JvB_tmp[161] = p[3]*vB_tmp[161]-k[1]*p[3]*vB_tmp[153]*w_tmp[2];
return(status);

}


