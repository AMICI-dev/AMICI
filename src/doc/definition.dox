/**
 @page def_simu Model Definition & Simulation
 
 In the following we will give a detailed overview how to specify models in AMIWRAP and how to call the generated simulation files.
 
 @section definition Model Definition
 
 This guide will guide the user on how to specify models in MATLAB. For example implementations see the examples in the example directory.
 
 @subsection header Header
 
 The model definition needs to be defined as a function which returns a struct with all symbolic definitions and options.
 
 @code function [model] = example_model_syms() @endcode
 
 @subsection options Options
 
 Set the options by specifying the respective field of the modelstruct
 
 @code model.(fieldname) = (value) @endcode
 
 The options specify default options for simulation, parametrisation and compilation. All of these options are optional.
 
 | field      | description                              | default
 |------------|------------------------------------------|---------
 | .param     | parametrisation 'log'/'log10'/'lin'      | 'lin'
 | .debug     | flag to compile with debug symbols       | false
 | .forward   | flag to activate forward sensitivities   | true
 | .adjoint   | flag to activate adjoint sensitivities   | true
 
 When set to true, the fields 'noforward' and 'noadjoint' will speed up the time required to compile the model but also disable the respective sensitivity computation.
 
 @subsection states States
 
 Create the respective symbolic variables. The name of the symbolic variable can be chosen arbitrarily.
 
 @code syms state1 state2 state3 @endcode
 
 Create the state vector containing all states:
 
 @code x = [ state1 state2 state3 ]; @endcode
 
 @subsection parameters Parameters
 
 Create the respective symbolic variables. The name of the symbolic variable can be chosen arbitrarily.
 Sensitivities <b>will be derived</b> for all paramaters.
 
 @code syms param1 param2 param3 param4 param5 param6 @endcode
 
 Create the parameters vector
 
 @code p = [ param1 param2 param3 param4 param5 param6 ]; @endcode
 
 @subsection constants Constants
 
 Create the respective symbolic variables. The name of the symbolic variable can be chosen arbitrarily.
 Sensitivities with respect to constants <b>will not be derived</b>.
 
 @code syms const1 const2 @endcode
 
 Create the parameters vector
 
 @code k = [ const1 const2 ]; @endcode
 
 @subsection rhs Differential Equation
 
 For time-dependent differential equations you can specify a symbolic variable for time. This <b>needs</b> to be denoted by t.
 
 @code syms t @endcode
 
 Specify the right hand side of the differential equation f or xdot
 
 @code
 xdot(1) = [ const1 - param1*state1 ];
 xdot(2) = [ +param2*state1 + dirac(t-param3) - const2*state2 ];
 xdot(3) = [ param4*state2 ];
 @endcode
 
 or
 
 @code
 f(1) = [ const1 - param1*state1 ];
 f(2) = [ +param2*state1 + dirac(t-param3) - const2*state2 ];
 f(3) = [ param4*state2 ];
 @endcode
 
 The specification of f or xdot may depend on @ref states, @ref parameters and @ref constants.
 
 For DAEs also specify the mass matrix.
 
 @code
 M = [1, 0, 0;...
 0, 1, 0;...
 0, 0, 0];
 @endcode
 
 The specification of M may depend on parameters and constants.
 
 For ODEs the integrator will solve the equation \f$ \dot{x} = f \f$ and for DAEs the equations \f$ M \cdot \dot{x} = f \f$.
 AMICI will decide whether to use CVODES (for ODEs) or IDAS (for DAEs) based on whether the mass matrix is defined or not.
 
 In the definition of the differential equation you can use certain symbolic functions. For a full list of available functions see symbolic_functions.c.
 
 Dirac functions can be used to cause a jump in the respective states at the specified time-point. This is typically used to model injections, or other external stimuli. Spline functions can be used to model time/state dependent response with unkown time/state dependence.
 
 @subsection init Initial Conditions
 
 Specify the initial conditions. These may depend on @ref parameters on @ref constants and must have the same size as x.
 
 @code x0 = [ param4, 0, 0 ]; @endcode
 
 @subsection observables Observables
 
 Specify the observables. These may depend on @ref parameters and @ref constants.
 
 @code
 y(1) = state1 + state2;
 y(2) = state3 - state2;
 @endcode
 
 In the definition of the observable you can use certain symbolic functions. For a full list of available functions see symbolic_functions.c.
 Dirac functions in observables will have no effect.
 
 @subsection events Events
 
 Specifying events is optional. Events are specified in terms of a trigger function, a bolus fuction and an output function. The roots of the trigger function defines the occurences of the event. The bolus function defines the change in the state on event occurences. The output function defines the expression which is evaluated and reported by the simulation routine on every event occurence. The user can create events by constructing a vector of objects of the class @ref amievent.
 
 @code event(1) = amievent(state1 - state2,0,[]); @endcode
 
 Events may depend on @ref states, @ref parameters and @ref constants but <b>not</b> on @ref observables
 
 @subsection std Standard Deviation
 
 Specifying of standard deviations is optional. It only has an effect when computing adjoint sensitivities. It allows the user to specify standard deviations of experimental data for @ref observables and @ref events.
 
 Standard deviaton for observable data is denoted by sigma_y
 
 @code sigma_y(1) = param5; @endcode
 
 Standard deviaton for event data is denoted by sigma_y
 
 @code sigma_t(1) = param6; @endcode
 
 Both sigma_y and sigma_t can either be a scalar or of the same dimension as the @ref observables / @ref events function.
 They can depend on time and @ref parameters but must not depend on the @ref states or @ref observables. The values provided in sigma_y and sigma_t will only be used if the value in Sigma_Y or Sigma_T in the user-provided data struct is NaN. See @ref simulation for details.
 
 @subsection attach Attach to Model Struct
 
 Eventually all symbolic expressions need to be attached to the model struct.
 
 @code
 model.sym.x = x;
 model.sym.k = k;
 model.sym.event = event;
 model.sym.xdot = xdot;
 % or
 model.sym.f = f;
 model.sym.M = M; %only for DAEs
 model.sym.p = p;
 model.sym.x0 = x0;
 model.sym.y = y;
 model.sym.sigma_y = sigma_y;
 model.sym.sigma_t = sigma_t;
 @endcode
 
 @section compilation Model Compilation
 
 The model can then be compiled by calling amiwrap:
 
 @code
 amiwrap(modelname,'example_model_syms',dir,o2flag)
 @endcode
 
 Here modelname should be a string defining the modelname, dir should be a string containing the path to the directory in which simulation files should be placed and o2flag is a flag indicating whether second order sensitivities should also be compiled.
 The user should make sure that the previously defined function 'example_model_syms' is in the user path. Alternatively, the user can also call the function 'example_model_syms'
 
 @code [model] = example_model_syms() @endcode
 
 and subsequently provide the generated struct to amiwrap(), instead of providing the symbolic function:
 
 @code
 amiwrap(modelname,model,dir,o2flag)
 @endcode
 
 In a similar fashion, the user could also generate multiple model and pass them directly to amiwrap() without generating respective model definition scripts.
 
 @sa amiwrap()
 
 @section simulation Model Simulation
 
 After the call to amiwrap() two files will be placed in the specified directory. One is a am_<i>modelname</i>.mex and the other is simulate_<i>modelname</i>.m. The mex file should never be called directly. Instead the MATLAB script, which acts as a wrapper around the .mex simulation file should be used.
 
 The simulate_<i>modelname</i>.m itself carries extensive documentation on how to call the function, what it returns and what additional options can be specified. In the following we will give a short overview of possible function calls.
 
 @subsection integration Integration
 
 Define a time vector:
 
 @code
 t = linspace(0,10,100)
 @endcode
 
 Generate a parameter vector:
 
 @code
 theta = ones(6,1);
 @endcode
 
 Generate a constants vector:
 
 @code
 kappa = ones(2,1);
 @endcode
 
 Integrate:
 
 @code
 sol = simulate_modelname(t,theta,kappa,[],options)
 @endcode
 
 The integration status will be indicated by the sol.status flag. Negative values indicated failed integration. The states will then be available as sol.x. The observables will then be available as sol.y. The events will then be available as sol.root. If no event occured there will be an event at the end of the considered interval with the final value of the root function stored in sol.rval.
 
 Alternatively the integration call also be called via
 
 @code
 [status,t,x,y] = simulate_modelname(t,theta,kappa,[],options)
 @endcode
 
 The integration status will be indicated by the status flag. Negative values indicated failed integration. The states will then be available as x. The observables will then be available as y. No event output will be given.
 
 @subsection forward Forward Sensitivities
 
 Define a time vector:
 
 @code
 t = linspace(0,10,100)
 @endcode
 
 Generate a parameter vector:
 
 @code
 theta = ones(6,1);
 @endcode
 
 Generate a constants vector:
 
 @code
 kappa = ones(2,1);
 @endcode
 
 Set the sensitivity computation to forward sensitivities and Integrate:
 
 @code
 options.sensi = 1;
 options.forward = true;
 sol = simulate_modelname(t,theta,kappa,[],options)
 @endcode
 
 The integration status will be indicated by the sol.status flag. Negative values indicated failed integration. The states will then be available as sol.x, with the derivative with respect to the parameters in sol.sx. The observables will then be available as sol.y, with the derivative with respect to the parameters in sol.sy. The events will then be available as sol.root, with the derivative with respect to the parameters in sol.sroot. If no event occured there will be an event at the end of the considered interval with the final value of the root function stored in sol.rootval, with the derivative with respect to the parameters in sol.srootval
 
 Alternatively the integration call also be called via
 
 @code
 [status,t,x,y,sx,sy] = simulate_modelname(t,theta,kappa,[],options)
 @endcode
 
 The integration status will be indicated by the status flag. Negative values indicated failed integration. The states will then be available as x, with derivative with respect to the parameters in sx. The observables will then be available as y, with derivative with respect to the parameters in sy. No event output will be given.
 
 @subsection adjoint Adjoint Sensitivities
 
 Define a time vector:
 
 @code
 t = linspace(0,10,100)
 @endcode
 
 Generate a parameter vector:
 
 @code
 theta = ones(6,1);
 @endcode
 
 Set the sensitivity computation to adjoint sensitivities:
 
 @code
 options.sensi = 1;
 options.adjoint = true;
 @endcode
 
 Define Experimental Data:
 
 @code
 D.Y = [NaN(1,2)],ones(length(t)-1,2)];
 D.Sigma_Y = [0.1*ones(length(t)-1,2),NaN(1,2)];
 D.T = ones(1,1);
 D.Sigma_T = NaN;
 @endcode
 
 The NaN values in Sigma_Y and Sigma_T will be replaced by the specification in @ref std. Data points with NaN value will be completely ignored.
 
 Generate a constants vector:
 
 @code
 kappa = ones(2,1);
 @endcode
 
 Integrate:
 
 @code
 sol = simulate_modelname(t,theta,kappa,D,options)
 @endcode
 
 The integration status will be indicated by the sol.status flag. Negative values indicated failed integration. The log-likelihood will then be available as sol.llh and the derivative with respect to the parameters in sol.sllh. Notice that for adjoint sensitivities no state, observable and event sensitivities will be available. Yet this approach can be expected to be significantly faster for systems with a large number of parameters.
 
 @subsection steadystate Steady State Sensitivities
 
 This will compute state sensitivities according to the formula \f$ s_k^x = -\left(\frac{\partial f}{\partial x} \right)^{-1}\frac{\partial f}{\partial \theta_k} \f$
 
 In the current implementation this formulation does not allow for conservation laws as this would result in a singular Jacobian.
 
 Define a final timepoint t:
 
 @code
 t = 100
 @endcode
 
 Generate a parameter vector:
 
 @code
 theta = ones(6,1);
 @endcode
 
 Generate a constants vector:
 
 @code
 kappa = ones(2,1);
 @endcode
 
 Set the sensitivity computation to steady state sensitivities:
 
 @code
 options.sensi = 1;
 options.ss = 1;
 @endcode
 
 Integrate:
 
 @code
 sol = simulate_modelname(t,theta,kappa,D,options)
 @endcode
 
 The states will then be available as sol.x, with the derivative with respect to the parameters in sol.sx. The observables will then be available as sol.y, with the derivative with respect to the parameters in sol.sy. Notice that for steady state sensitivities no event sensitivities will be available. For the accuracy of the computed derivatives it is essential that the system is sufficiently close to a steady state. This can be checked by examining the right hand side of the system at the final time-point via sol.xdot.
 
 */
