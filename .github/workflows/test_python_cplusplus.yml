name: C++/Python Tests
on:
  push:
  merge_group:
  workflow_dispatch:
  pull_request:
    branches:
      - master
      - develop

jobs:
  ubuntu-cpp-python-tests:
    name: C++/Python tests Ubuntu
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        python-version: [ "3.9" ]

    steps:
    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pooch
        key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ github.job }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - uses: actions/checkout@v4
    - run: git fetch --prune --unshallow

    - run: echo "AMICI_DIR=$(pwd)" >> $GITHUB_ENV

    - name: Set up AMICI C++ libraries
      uses: ./.github/actions/setup-amici-cpp

    - name: C++ tests
      run: scripts/run-cpp-tests.sh

    - name: Install python package
      run: scripts/installAmiciSource.sh

    - name: Check OpenMP support
      run: source build/venv/bin/activate && python -c "import amici; import sys; sys.exit(not amici.compiledWithOpenMP())"

    - name: Python tests (part 1)
      run: |
        source build/venv/bin/activate \
        && pytest \
          --ignore-glob=*petab* \
          --ignore-glob=*test_splines.py \
          --ignore-glob=*test_splines_short.py \
          --ignore-glob=*test_pysb.py \
          --cov=amici \
          --cov-report=xml:"${AMICI_DIR}/build/coverage_py.xml" \
          --cov-append \
          --durations=10 \
          ${AMICI_DIR}/python/tests

    - name: Python tests splines
      if: ${{ github.base_ref == 'master' || github.event.merge_group.base_ref == 'master'}}
      run: |
        source build/venv/bin/activate \
        && pytest \
          --cov=amici \
          --cov-report=xml:"${AMICI_DIR}/build/coverage_py.xml" \
          --cov-append \
          --durations=10 \
          ${AMICI_DIR}/python/tests/test_splines.py

    - name: Codecov Python
      if: github.event_name == 'pull_request' || github.repository_owner == 'AMICI-dev'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: build/coverage_py.xml
        flags: python
        fail_ci_if_error: true
        verbose: true

    - name: Capture coverage info (lcov)
      run: |
        lcov --compat-libtool --no-external \
        -d ${AMICI_DIR}/build/CMakeFiles/amici.dir/src \
        -b ${AMICI_DIR} -c -o coverage_cpp.info \
        && lcov --compat-libtool --no-external \
        -d ${AMICI_DIR}/python/sdist/build/temp_amici/CMakeFiles/amici.dir/src \
        -b ${AMICI_DIR}/python/sdist -c -o coverage_py.info \
        && lcov -a coverage_cpp.info -a coverage_py.info -o coverage.info

    - name: Codecov CPP
      if: github.event_name == 'pull_request' || github.repository_owner == 'AMICI-dev'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage.info
        flags: cpp
        fail_ci_if_error: true

    - name: Run sonar-scanner
      if: ${{ env.SONAR_TOKEN != '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner \
         -Dsonar.cfamily.build-wrapper-output=bw-output \
         -Dsonar.projectVersion="$(git describe --abbrev=4 --dirty=-dirty --always --tags | tr -d '\n')"

  ubuntu-python-tests:
    name: Python tests Ubuntu
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        python-version: [ "3.9" ]

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - uses: actions/checkout@v4
    - run: git fetch --prune --unshallow

    - run: echo "AMICI_DIR=$(pwd)" >> $GITHUB_ENV

    - name: Set up AMICI C++ libraries
      uses: ./.github/actions/setup-amici-cpp

    - name: Install python package
      run: scripts/installAmiciSource.sh

    - name: Python tests
      run: |
        source build/venv/bin/activate \
        && pytest \
          --cov=amici \
          --cov-report=xml:"${AMICI_DIR}/build/coverage_py.xml" \
          --cov-append \
          --durations=10 \
          ${AMICI_DIR}/python/tests/test_pysb.py \
          ${AMICI_DIR}/python/tests/test_splines_short.py

    - name: Codecov Python
      if: github.event_name == 'pull_request' || github.repository_owner == 'AMICI-dev'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: build/coverage_py.xml
        flags: python
        fail_ci_if_error: true
        verbose: true

    - name: Capture coverage info (lcov)
      run: |
        lcov --compat-libtool --no-external \
        -d ${AMICI_DIR}/build/CMakeFiles/amici.dir/src \
        -b ${AMICI_DIR} -c -o coverage_cpp.info \
        && lcov --compat-libtool --no-external \
        -d ${AMICI_DIR}/python/sdist/build/temp_amici/CMakeFiles/amici.dir/src \
        -b ${AMICI_DIR}/python/sdist -c -o coverage_py.info \
        && lcov -a coverage_cpp.info -a coverage_py.info -o coverage.info

    - name: Codecov CPP
      if: github.event_name == 'pull_request' || github.repository_owner == 'AMICI-dev'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage.info
        flags: cpp_python
        fail_ci_if_error: true

    - name: Run sonar-scanner
      if: ${{ env.SONAR_TOKEN != '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner \
         -Dsonar.cfamily.build-wrapper-output=bw-output \
         -Dsonar.projectVersion="$(git describe --abbrev=4 --dirty=-dirty --always --tags | tr -d '\n')"


  ubuntu-notebook-tests:
    name: Notebook tests Ubuntu
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        python-version: [ "3.9" ]

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - uses: actions/checkout@v4
    - run: git fetch --prune --unshallow

    - run: echo "AMICI_DIR=$(pwd)" >> $GITHUB_ENV

    - name: Set up AMICI C++ libraries
      uses: ./.github/actions/setup-amici-cpp

    - name: Install python package
      run: scripts/installAmiciSource.sh

    - name: Install notebook dependencies
      run: |
        source build/venv/bin/activate \
        && pip install jax[cpu]

    - name: example notebooks
      run: scripts/runNotebook.sh python/examples/example_*/

    - name: doc notebooks
      run: scripts/runNotebook.sh documentation/GettingStarted.ipynb

    # TODO: Include notebooks in coverage report

  macos_cpp_py:
    name: Tests MacOS C++/Python
    runs-on: macos-latest

    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.9

    - uses: actions/checkout@v4
    - run: git fetch --prune --unshallow

    - name: Install dependencies
      uses: ./.github/actions/install-macos-dependencies

    - name: homebrew
      run: brew install cppcheck

    - name: Build AMICI
      run: scripts/buildAll.sh

    - name: Install python package
      run: scripts/installAmiciSource.sh

    - name: Check OpenMP support
      run: source build/venv/bin/activate && python -c "import amici; import sys; sys.exit(not amici.compiledWithOpenMP())"

    - name: cppcheck
      run: scripts/run-cppcheck.sh

    - name: C++ tests
      run: scripts/run-cpp-tests.sh

    - name: Python tests
      run: |
        scripts/run-python-tests.sh \
          test_pregenerated_models.py \
          test_splines_short.py \
          test_misc.py


  macos_python:
    name: Tests MacOS Python
    runs-on: macos-latest

    steps:
    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Caches/pooch
        key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ github.job }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.9

    - uses: actions/checkout@v4
    - run: git fetch --prune --unshallow

    - name: Install dependencies
      uses: ./.github/actions/install-macos-dependencies

    - name: Install python package
      run: |
        pip show numpy > /dev/null || python3 -m pip install numpy
        scripts/installAmiciSource.sh

    - name: Check OpenMP support
      run: source build/venv/bin/activate && python -c "import amici; import sys; sys.exit(not amici.compiledWithOpenMP())"

    - name: Get BioNetGen
      run: scripts/buildBNGL.sh

    - name: Python tests
      run: |
        scripts/run-python-tests.sh \
          --ignore=test_pregenerated_models.py \
          --ignore=test_splines_short.py \
          --ignore=test_misc.py
